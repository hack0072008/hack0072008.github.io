<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos7-Swap扩展]]></title>
    <url>%2F2019%2F07%2F12%2FCentos7-Swap%E5%A2%9E%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[1 查看swap使用情况1swapon -s 2 查看内存情况1free -m 3 查看磁盘情况1df -h 4 创建swap文件1sudo fallocate -l 4G /swapfile1 5 启用swap文件1234sudo chmod 600 /swapfile1sudo mkswap /swapfile1swapon /swapfile1 (swapoff /swapfile1)free -m 6.1 永久自动开启swap-方式112/etc/rc.d/rc.local:/sbin/swapon /swapfile1 6.2 永久自动开启swap-方式212vim /etc/fstab:/swapfile1 swap swap sw 0 0 7.0 swap系统参数swappiness查看1/proc/sys/vm/swappiness:0~100(值越小-不使用swap，值越大-尽量使用swap) 7.1 临时更改swap系统参数swappiness1sudo sysctl vm.swappiness=10(临时更改) 7.2 永久更改swap系统参数swappiness12vim /etc/sysctl.conf：vm.swappiness = 10 8.0 swap系统参数vfs_cache_pressure查看1cat /proc/sys/vm/vfs_cache_pressure 8.1 临时更改swap系统参数vfs_cache_pressure1sudo sysctl vm.vfs_cache_pressure=50 8.2 永久更改swap系统参数vfs_cache_pressure12vim /etc/sysctl.conf：vm.vfs_cache_pressure = 50]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Swap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes-技能图谱]]></title>
    <url>%2F2019%2F06%2F24%2Fk8s-%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1%2F</url>
    <content type="text"><![CDATA[Kubernetes 技能图谱Container basics （容器技术基础） Kernel Cgroups Userspace runtime Image Registry Kubernetes architecture （Kubernetes 架构）WorkerKubelet Runtime （容器运行时） CRI (Container Runtime Interface) Runtime shims （容器运行时插件） Cri-containerd （containerd） Dockershim （Docker） Cri-o （runC） Rktlet （rkt） Frakti （runV） Networking CNI (Container Network Interface) Network plugins （网络插件） Flannel Calico OVS SR-IOV macvlan/ipvlan Opencontrail Weave Storage CSI (Container Storage Interface) Volume plugins （存储插件） NFS Cinder GlusterFS Ceph Local path Kube-proxy Iptables 转发链与随机模式 ipvs 负载均衡 Master API server Watch &amp; Informer （Watch 和通知框架） Admission Plugin（权限控制插件） RBAC plugin （基于角色的访问控制插件） Controller manager Reconcile （控制循环与状态协调机制） Scheduler Custom scheduler （自定义调度器） Custom algrhrim （自定义调度算法） Etcd Etcd operator Kubernetes workloads （Kubernetes 作业管理） ReplicaSet （容器副本） Deployment （常规作业发布） Rolling update （自动的滚动更新） Pause/resume （可控的更新流程） Canary deploy （金丝雀发布） Rollback （版本回滚） DaemonSet （Daemon 作业） StatefulSet （有状态任务） Job （一次性任务） CronJob （定时任务） Kubernetes applications management （Kubernetes 应用配置） Service （服务发现） Publish service（对外暴露 Service） Nginx/HAproxy service（自定义 Service） External Load Balancer ConfigMap （应用配置管理） Ingress （7层服务发现） Secret （加密信息管理） Headless Service（DNS 服务发现） External Load Balancer Kubernetes operations （Kubernetes 安装与运维） Installation Kubeadm Minikube （本地部署工具） Kops （云端部署工具） Maintenances GC （垃圾清理） Container GC Image GC Upgrades Troubleshooting etcd admin Key-value CRUD（键值对操作） Metrics monitoring （Metrics 监控） Cluster design（集群规划） Disaster Recovery （灾难恢复，backup 和 restore） Iptables rules Kubernetes extensions/add-ons （Kubernetes 扩展和插件） Custom Resources Definition （自定义 Kubernetes API 对象） Customized controller （自定义 API 对象控制器） Workqueue （自定义 API 对象任务队列） Kube-dns SkyDNS Fluentd （日志收集） Fluent-bit Heapster (容器集群监控） Istio（微服务路由和负载均衡） Federation （集群联邦） Helm (kubernetes application package) Kubernetes CI/CD Spinnaker]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Istio服务网格]]></title>
    <url>%2F2019%2F06%2F05%2Fistio%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[istio服务网格[Service Mesh]Istio官网介绍 官方架构图]]></content>
      <categories>
        <category>Istio</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[consul-API操作总结]]></title>
    <url>%2F2019%2F05%2F28%2Fconsul-API%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[案例一 kv.delete：conn.kv.delete(key = &apos;deploy/deployGroup/media/info&apos;, recurse = True) - 如果info是key且存在，则会删除info*的所有key,media目录保留； 如果info是key且不存在，则无操作,media目录保留 - 如果info是目录且存在，则会删除info*的所有key和目录,media目录保留； 如果info是目录且不存在，则无操作,media目录保留总结一 kv.delete： recurse,目录递归参数 删除目录时True xxx* 匹配删除 删除key时False xxx 匹配删除 key, 删除指定的kv值 目录 xxx/yyy/ key xxx/yyy 二者的关系(已测试) 如果删除key 时recurse = True，会删除父级目录及所有key 如果删除目录时recurse = True，会删除目录 如果删除 key时recurse = False，会删除key 如果删除目录时recurse = False，无操作 总结： 删除key，末尾不带/, recurse = False(匹配上删除key, 匹配不上无操作) 删除目录,末尾带/, recurse = True (匹配上删除目录, 匹配不上无操作)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vsCode使用]]></title>
    <url>%2F2019%2F05%2F09%2FvsCode%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[settings.json:12345678&#123; "workbench.colorTheme": "Default Light+", #设置主题 "vetur.validation.template": false, "python.autoComplete.addBrackets": true, "window.title": "$&#123;activeEditorLong&#125;", #设置vscode title为当前文件的完整路径 "workbench.editor.showTabs": true, #开启标签 "workbench.editor.enablePreview": false #关闭预览，不覆盖标签&#125; 待续]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-markdown]]></title>
    <url>%2F2019%2F04%2F17%2Fpython-markdown%2F</url>
    <content type="text"><![CDATA[installpip install markdownuseage:joy: https://www.webfx.com/tools/emoji-cheat-sheet/:star::sparkles::star2::earth_asia::cn::one::u7981::x: 12shell: markdown_py -o html -x nl2br -x tables -x fenced_code -x abbr python-syntax.md -f python-syntax.html 123456789101112python: import codecs, markdown from markdown.extensions.abbr import AbbrExtension from markdown.extensions.fenced_code import FencedCodeExtension input_file = codecs.open("some_file.md", mode="r", encoding="utf-8") text = input_file.read() html = markdown.markdown(text, extensions=['nl2br', 'fenced_code']) output_file = codecs.open("some_file.html", mode="w", encoding="utf-8") output_file.write(html) supported-extensions:https://python-markdown.github.io/extensions/#officially-supported-extensions Extra extra markdown.extensions.extra Abbreviations abbr markdown.extensions.abbr Attribute Lists attr_list markdown.extensions.attr_list Definition Lists def_list markdown.extensions.def_list Fenced Code Blocks fenced_code markdown.extensions.fenced_code Footnotes footnotes markdown.extensions.footnotes Tables tables markdown.extensions.tables Admonition admonition markdown.extensions.admonition CodeHilite codehilite markdown.extensions.codehilite Legacy Attributes legacy_attr markdown.extensions.legacy_attr Legacy Emphasis legacy_em markdown.extensions.legacy_em Meta-Data meta markdown.extensions.meta New Line to Break nl2br markdown.extensions.nl2br Sane Lists sane_lists markdown.extensions.sane_lists SmartyPants smarty markdown.extensions.smarty Table of Contents toc markdown.extensions.toc WikiLinks wikilinks markdown.extensions.wikilinks dochttps://python-markdown.github.io/cli/ https://python-markdown.github.io/extensions/ https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions参考文档:https://www.jianshu.com/p/0eff6cba1b7f]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windown下python发送QQ消息]]></title>
    <url>%2F2019%2F04%2F11%2Fwin-python-qq-msg%2F</url>
    <content type="text"><![CDATA[说明在window x64下python3.7.3 给已登录的QQ指定好友发送指定的消息,再结合flask转化为http模式,测试成功 遗留问题：QQ组合键发送消息测试不通过123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#!/usr/bin/python #-*-coding:utf-8-*-# vim: tabstop=4 shiftwidth=4 softtabstop=4# copyright 2019 xxxx, Inc.# All Rights Reserved.# @author: ZhangYh, xxxx, Inc.'''example: https://blog.csdn.net/suzyu12345/article/details/52934328 http://www.cnblogs.com/417xiaoliu/p/6898419.htmlnote: 以前看到网上一些小程序，在处理完事物后会自动发送qq消息，但是一直搞不懂是说明原理。也在网上找过一些python登陆qq发送消息的文字，但是都太复杂了。今天偶然看到一篇文章，是用python调用win32的接口发送qq消息的，觉得不错，就先记录下来，日后肯定会用得上这些小工具。 发送qq消息要求已经登陆qq，而且qq的窗口是独立的，现在新版的qq一般都是将所有的聊天窗口聚合在一起，因此要设置将qq窗口分离，或者将需要发送消息的那个窗口单独分离出来。 上代码吧。useage: python: import requests requests.post(url = 'http://192.168.1.101:5001/api/qqMsg', headers = &#123;'Content-Type' : 'application/x-www-form-urlencoded'&#125;, data = &#123;'recv_buddy' : '张三', 'message' : '来一发,v1.0.3'&#125; )''''''windows 64(专业版)python 3.7.3pip install pywin32QQ9.0.1(23161)QQ设置：1.单独会话窗口模式(非合并窗口)2.回车发送消息(热键)3.已登录,并打开待发送的会话窗口'''# 原理是先将需要发送的文本放到剪贴板中，然后将剪贴板内容发送到qq窗口# 之后模拟按键发送enter键发送消息import win32guiimport win32conimport win32clipboard as wfrom flask import request, Flask, redirect, url_for, render_template, Responsefrom flask import jsonifyfrom flask import abortfrom flask import redirectimport urllibimport jsondef getText(): """获取剪贴板文本""" w.OpenClipboard() d = w.GetClipboardData(win32con.CF_UNICODETEXT) w.CloseClipboard() return ddef setText(aString): """设置剪贴板文本""" w.OpenClipboard() w.EmptyClipboard() w.SetClipboardData(win32con.CF_UNICODETEXT, aString) w.CloseClipboard()def send_qq(to_who, msg): """发送qq消息 to_who：qq消息接收人 msg：需要发送的消息 """ # 将消息写到剪贴板 setText(msg) # 获取qq窗口句柄 qq = win32gui.FindWindow(None, to_who) # 投递剪贴板消息到QQ窗体 win32gui.SendMessage(qq, 258, 22, 2080193) win32gui.SendMessage(qq, 770, 0, 0) # 模拟按下回车键 win32gui.SendMessage(qq, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0) win32gui.SendMessage(qq, win32con.WM_KEYUP, win32con.VK_RETURN, 0) # 模拟组合键: CTRL + 回车键(未成功) #win32gui.SendMessage(qq, win32con.WM_KEYDOWN, win32con.VK_CONTROL, 0) #win32gui.SendMessage(qq, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0) #win32gui.SendMessage(qq, win32con.WM_KEYUP, win32con.VK_CONTROL, 0) #win32gui.SendMessage(qq, win32con.WM_KEYUP, win32con.VK_RETURN, 0)# 测试#to_who='哈哈哈'#msg='这是测试v1.0.2'#send_qq(to_who, msg)app = Flask(__name__)@app.route('/index', methods = ['GET'])def index(): return jsonify( &#123; "errno" : 200,"errmsg" : u"成功" &#125; )@app.route('/api/qqMsg', methods=['POST','GET'])def toQqMsq(): if request.method == 'POST': recv_buddy = request.form.get('recv_buddy', None) message = request.form.get('message', None) print('recv_buddy:%s' % recv_buddy) print('message:%s' % message) if recv_buddy is None or message is None: return jsonify( &#123; "errno" : 1001,"errmsg" : u"参数错误" &#125; ) send_qq(recv_buddy, message) print('发送到[%s] 消息内容[%s] 成功' % (recv_buddy, message)) return jsonify( &#123; "errno" : 200,"errmsg" : u"发送成功" &#125; ) else: abort(404)#mainif __name__ == '__main__': app.run(host = '0.0.0.0', port = '5001', debug = True)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python syntax]]></title>
    <url>%2F2019%2F04%2F11%2Fpython%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.getattr,setattr,hasattr语法12345678910111213141516171819202122232425262728293031323334353637383940414243class Student(object): def __init(self): self._score = None @property def score(self): return self._score @score.setter def score(self, value): if not isinstance(value, int): raise TypeError('score must integer') elif int(value) &lt; 0 or int(value) &gt; 100: raise ValueError('score must between 0~100') else: self._score = value def p_score(self, str): print "%s, score:%s" % (str, self._score) &gt;&gt;&gt; s = Student()&gt;&gt;&gt; hasattr(s, 'score')False&gt;&gt;&gt; getattr(s, 'score')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 6, in scoreAttributeError: 'Student' object has no attribute '_score'&gt;&gt;&gt; setattr(s, 'age', 20)&gt;&gt;&gt; hasattr(s, 'age')True&gt;&gt;&gt; getattr(s, 'age')20&gt;&gt;&gt; s.score = 90&gt;&gt;&gt; getattr(s, 'score')90&gt;&gt;&gt; hasattr(s, 'score')True``` #### 2.property, xxxx.setter语法```python#参考上面demos = Student()s.score = 100 #Student类的settter:def score(self, value)s.score #Student类的getter:def score(self) 3.importlib语法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384''' importlib.util py3特有 imp py2特有'''#动态引入#importer.pyimport importlibdef dynamic_import(module): return importlib.import_module(module)if __name__ == "__main__": module = dynamic_import('foo') module.main() module_two = dynamic_import('bar') module_two()#模块引入检查import importlib.utilimport importlibdef check_module(module_name): module_spec = importlib.util.find_spec(module_name) if module_spec is None: print("Module :&#123;&#125; not found".format(module_name)) return None else: print("Module:&#123;&#125; can be imported!".format(module_name)) return module_spec def import_module_from_spec(module_spec): module = importlib.util.module_from_spec(module_spec) module_spec.loader.exec_module(module) return module if __name__ == "__main__": module_spec = check_module("fake_module") module_spec = check_module("collections") if(module_spec): module = import_module_from_spec(module_spec) print(dir(module))#从源文件中引入import importlib.utildef import_source(module_name): module_file_path = module_name.__file__ module_name = module_name.__name__ module_spec = importlib.util.spec_from_file_location(module_name,module_file_path) module = importlib.util.module_from_spec(module_spec) module_spec.loader.exec_module(module) print(dir(module)) msg = "The &#123;module_name&#125; module has the following methods:&#123;methods&#125;" print(msg.format(module_name = module_name,methods = dir(module))) if __name__ == "__main__": import logging import_source(logging) #import_from_github_com&gt;&gt;&gt; from github_com.zzzeek import sqlalchemyCollecting git+https://github.com/zzzeek/sqlalchemyCloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-buildInstalling collected packages: SQLAlchemyRunning setup.py install for SQLAlchemy ... doneSuccessfully installed SQLAlchemy-1.1.0b1.dev0&gt;&gt;&gt; locals()&#123;'__builtins__': &lt;module 'builtins' (built-in)&gt;, '__spec__': None,'__package__': None, '__doc__': None, '__name__': '__main__','sqlalchemy': &lt;module 'sqlalchemy' from '/usr/local/lib/python3.5/site-packages/\sqlalchemy/__init__.py'&gt;,'__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;&#125;#class检查def __file_classes__(self, py_path, py_name): ''' inspect:ismodule(), isclass(), ismethod(), isfunction() ''' import inspect,imp mod = imp.load_source(py_name.split('.')[0], py_path + '/' + py_name) #mod = importlib.import_module('commCrypt3DES') return [item for item in vars(mod).keys() if inspect.isclass(vars(mod)[item])] 4.自定义异常12345678910111213141516171819202122232425#参考：lib64/python2.7/site-packages/django/core/exceptions.pyclass ValidationError(Exception): def __init__(self, message, code=None, params=None): """The requested model field does not exist""" super(ValidationError, self).__init__(message, code, params) def __iter__(self): if hasattr(self, 'error_dict'): for field, errors in self.error_dict.items(): yield field, list(ValidationError(errors)) else: for error in self.error_list: message = error.message if error.params: message %= error.params yield force_text(message) def __str__(self): if hasattr(self, 'error_dict'): return repr(dict(self)) return repr(list(self)) def __repr__(self): return 'ValidationError(%s)' % self 5.sys包 获取当前import path 获取当前已导入module列表 获取当前系统信息和版本等 获取当前python版本等 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import sys&gt;&gt;&gt; sys.path&gt;&gt;&gt; ['', '/usr/lib/python2.7/site-packages/webkit2png-0.8.3-py2.7.egg', '/usr/lib64/python27.zip', '/usr/lib64/python2.7', '/usr/lib64/python2.7/plat-linux2', '/usr/lib64/python2.7/lib-tk', '/usr/lib64/python2.7/lib-old', '/usr/lib64/python2.7/lib-dynload', '/usr/lib64/python2.7/site-packages', '/usr/lib64/python2.7/site-packages/PIL', '/usr/lib/python2.7/site-packages']&gt;&gt;&gt; sys.modules&gt;&gt;&gt; &#123;'Crypto.Protocol': &lt;module 'Crypto.Protocol' from '/usr/lib64/python2.7/site-packages/Crypto/Protocol/__init__.pyc'&gt;,...&#125;help(sys) __stderr__ = &lt;open file '&lt;stderr&gt;', mode 'w'&gt; __stdin__ = &lt;open file '&lt;stdin&gt;', mode 'r'&gt; __stdout__ = &lt;open file '&lt;stdout&gt;', mode 'w'&gt; api_version = 1013 argv = [''] builtin_module_names = ('__builtin__', '__main__', '_ast', '_codecs', ... byteorder = 'little' copyright = 'Copyright (c) 2001-2013 Python Software Foundati...ematis... dont_write_bytecode = False exc_value = TypeError("&lt;module 'sys' (built-in)&gt; is a built-in module"... exec_prefix = '/usr' executable = '/usr/bin/python' flags = sys.flags(debug=0, py3k_warning=0, division_warn...unicode=0, ... float_info = sys.float_info(max=1.7976931348623157e+308, max_...epsilo... float_repr_style = 'short' hexversion = 34014704 last_value = NameError("name 'sys' is not defined",) long_info = sys.long_info(bits_per_digit=30, sizeof_digit=4) maxint = 9223372036854775807 maxsize = 9223372036854775807 maxunicode = 1114111 meta_path = [] modules = &#123;'Crypto': &lt;module 'Crypto' from '/usr/lib64/python2.7/site-... path = ['', '/usr/lib/python2.7/site-packages/webkit2png-0.8.3-py2.7.e... path_hooks = [&lt;type 'zipimport.zipimporter'&gt;] path_importer_cache = &#123;'': None, '/usr/lib/python2.7/site-packages': N... platform = 'linux2' prefix = '/usr' ps1 = '&gt;&gt;&gt; ' ps2 = '... ' py3kwarning = False pydebug = False stderr = &lt;open file '&lt;stderr&gt;', mode 'w'&gt; stdin = &lt;open file '&lt;stdin&gt;', mode 'r'&gt; stdout = &lt;open file '&lt;stdout&gt;', mode 'w'&gt; subversion = ('CPython', '', '') version = '2.7.5 (default, Jul 13 2018, 13:06:57) \n[GCC 4.8.5 2015062... version_info = sys.version_info(major=2, minor=7, micro=5, releaseleve... warnoptions = [] 6.django源码学习参考：http://www.cnblogs.com/richiewlq/category/1148206.html待续]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[django-model与SQL互转]]></title>
    <url>%2F2019%2F01%2F31%2Fdjango-model%E4%B8%8ESQL%E4%BA%92%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[django的model与SQL互相转换参考： https://www.jianshu.com/p/d2fae133d1d4安装依赖库- pip install django-pyodbc-azure pyodbc - 源码安装错误一：src/pyodbc.h:56:17: 致命错误：sql.h：没有那个文件或目录 解决： yum install unixODBC unixODBC-devel 再重装错误二：django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb. 解决： pip install mysql-python错误三：sh: mysql_config: 未找到命令 解决： yum install mysql-devel错误四：django.db.utils.OperationalError: (1045, &quot;Access denied for user &apos;root&apos;@&apos;127.0.0.1&apos; (using password: YES)&quot;) 解决： 开启mysql root用户密码登录，并检查`数据库用户名、密码、数据库库名配置`信息配置django databases12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'db_name', 'USER': 'user', 'PASSWORD': 'pass', 'HOST': '127.0.0.1', 'PORT': '3306' &#125;&#125; SQL转model1python manage.py inspectdb &gt; ./app_name/models.py model转SQL- django1.9不支持，只能用django命令 创建数据库更改`python manage.py makemigrations`、应用数据库`python manage.py migrate`，再用工具导出SQL - 老版本django可以用 `python manage.py sqlall app_name`命令把model转sql完]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python的ast模块之literal_eval妙用]]></title>
    <url>%2F2019%2F01%2F21%2Fpython-ast-str2json%2F</url>
    <content type="text"><![CDATA[python ast moduleimport ast python解析执行的过程： 词法分析 --&gt; 具体语法树 --&gt; 抽象语法树 --&gt; 控制流图 --&gt; 字节码 --&gt; 执行 ast提供了访问和修改上述中抽象语法树的功能 参考： https://zhuanlan.zhihu.com/p/21945624利用ast.literal_eval 转换 字符串 到 json对象123456789101112import astimport jsonstr = "&#123;\"errcode\":0,\"errmsg\":\"ok\",\"invaliduser\":\"\"&#125;"dict = ast.literal_eval(str)type(str)&lt;type 'str'&gt;type(ast.literal_eval(str))&lt;type 'dict'&gt;#requestjson.loads(ast.literal_eval(response.text))['errcode']]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github api]]></title>
    <url>%2F2019%2F01%2F11%2Fgithub-RestFul-API%2F</url>
    <content type="text"><![CDATA[github API DOC:https://developer.github.com/v3/repos/contents/#get-contents]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全漏洞查询]]></title>
    <url>%2F2019%2F01%2F11%2F%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[国内cnvdhttp://www.cnnvd.org.cn/ http://www.cnvd.org.cn/ http://cve.scap.org.cn/国外nvdhttps://nvd.nist.gov/ http://cve.mitre.org/]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-爬虫破解cookies]]></title>
    <url>%2F2019%2F01%2F11%2Fpython-%E7%88%AC%E8%99%AB%E7%A0%B4%E8%A7%A3cookies%2F</url>
    <content type="text"><![CDATA[参考：http://www.cnblogs.com/jhao/p/6609605.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# -*- coding: utf-8 -*-"""------------------------------------------------- File Name： demo_1.py.py Description : Python爬虫—破解JS加密的Cookie 快代理网站为例：http://www.kuaidaili.com/proxylist/1/ Document: Author : JHao date： 2017/3/23------------------------------------------------- Change Activity: 2017/3/23: 破解JS加密的Cookie-------------------------------------------------"""__author__ = 'JHao'import reimport PyV8import requestsTARGET_URL = "http://www.kuaidaili.com/proxylist/1/"def getHtml(url, cookie=None): header = &#123; "Host": "www.kuaidaili.com", 'Connection': 'keep-alive', 'Cache-Control': 'max-age=0', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, sdch', 'Accept-Language': 'zh-CN,zh;q=0.8', &#125; html = requests.get(url=url, headers=header, timeout=30, cookies=cookie).content return htmldef executeJS(js_func_string, arg): ctxt = PyV8.JSContext() ctxt.enter() func = ctxt.eval("(&#123;js&#125;)".format(js=js_func_string)) return func(arg)def parseCookie(string): string = string.replace("document.cookie='", "") clearance = string.split(';')[0] return &#123;clearance.split('=')[0]: clearance.split('=')[1]&#125;# 第一次访问获取动态加密的JSfirst_html = getHtml(TARGET_URL)# first_html = """# &lt;html&gt;&lt;body&gt;&lt;script language="javascript"&gt; window.onload=setTimeout("lu(158)", 200); function lu(OE) &#123;var qo, mo="", no="", oo = [0x64,0xaa,0x98,0x3d,0x56,0x64,0x8b,0xb0,0x88,0xe1,0x0d,0xf4,0x99,0x31,0xd8,0xb6,0x5d,0x73,0x98,0xc3,0xc4,0x7a,0x1e,0x38,0x9d,0xe8,0x8d,0xe4,0x0a,0x2e,0x6c,0x45,0x69,0x41,0xe5,0xd0,0xe5,0x11,0x0b,0x35,0x7b,0xe4,0x09,0xb1,0x2b,0x6d,0x82,0x7c,0x25,0xdd,0x70,0x5a,0xc4,0xaa,0xd3,0x74,0x98,0x42,0x3c,0x60,0x2d,0x42,0x66,0xe0,0x0a,0x2e,0x96,0xbb,0xe2,0x1d,0x38,0xdc,0xb1,0xd6,0x0e,0x0d,0x76,0xae,0xc3,0xa9,0x3b,0x62,0x47,0x40,0x15,0x93,0xb7,0xee,0xc3,0x3e,0xfd,0xd3,0x0d,0xf6,0x61,0xdc,0xf1,0x2c,0x54,0x8c,0x90,0xfa,0x24,0x5b,0x83,0x0c,0x75,0xaf,0x18,0x01,0x7e,0x68,0xe0,0x0a,0x72,0x1e,0x88,0x33,0xa7,0xcc,0x31,0x9b,0xf3,0x1a,0xf2,0x9a,0xbf,0x58,0x83,0xe4,0x87,0xed,0x07,0x7e,0xe2,0x00,0xe9,0x92,0xc9,0xe8,0x59,0x7d,0x56,0x8d,0xb5,0xb2,0x6c,0xe0,0x49,0x73,0xfc,0xe7,0x20,0x49,0x34,0x09,0x71,0xeb,0x60,0xfd,0x8e,0xad,0x0f,0xb9,0x2e,0x77,0xdc,0x74,0x9b,0xbf,0x8f,0xa5,0x8d,0xb8,0xb0,0x06,0xac,0xc5,0xe9,0x10,0x12,0x77,0x9b,0xb1,0x19,0x4e,0x64,0x5c,0x00,0x98,0xc6,0xed,0x98,0x0d,0x65,0x11,0x35,0x9e,0xf4,0x30,0x93,0x4b,0x00,0xab,0x20,0x8f,0x29,0x4f,0x27,0x8c,0xc2,0x6a,0x04,0xfb,0x51,0xa3,0x4b,0xef,0x09,0x30,0x28,0x4d,0x25,0x8e,0x76,0x58,0xbf,0x57,0xfb,0x20,0x78,0xd1,0xf7,0x9f,0x77,0x0f,0x3a,0x9f,0x37,0xdb,0xd3,0xfc,0x14,0x39,0x11,0x3b,0x94,0x8c,0xad,0x8e,0x5c,0xd3,0x3b];qo = "qo=251; do&#123;oo[qo]=(-oo[qo])&amp;0xff; oo[qo]=(((oo[qo]&gt;&gt;4)|((oo[qo]&lt;&lt;4)&amp;0xff))-0)&amp;0xff;&#125; while(--qo&gt;=2);"; eval(qo);qo = 250; do &#123; oo[qo] = (oo[qo] - oo[qo - 1]) &amp; 0xff; &#125; while (-- qo &gt;= 3 );qo = 1; for (;;) &#123; if (qo &gt; 250) break; oo[qo] = ((((((oo[qo] + 200) &amp; 0xff) + 121) &amp; 0xff) &lt;&lt; 6) &amp; 0xff) | (((((oo[qo] + 200) &amp; 0xff) + 121) &amp; 0xff) &gt;&gt; 2); qo++;&#125;po = ""; for (qo = 1; qo &lt; oo.length - 1; qo++) if (qo % 5) po += String.fromCharCode(oo[qo] ^ OE);eval("qo=eval;qo(po);");&#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;# """# 提取其中的JS加密函数js_func = ''.join(re.findall(r'(function .*?)&lt;/script&gt;', first_html))print 'get js func:\n', js_func# 提取其中执行JS函数的参数js_arg = ''.join(re.findall(r'setTimeout\(\"\D+\((\d+)\)\"', first_html))print 'get ja arg:\n', js_arg# 修改JS函数，使其返回Cookie内容js_func = js_func.replace('eval("qo=eval;qo(po);")', 'return po')# 执行JS获取Cookiecookie_str = executeJS(js_func, js_arg)# 将Cookie转换为字典格式cookie = parseCookie(cookie_str)print cookie# 带上Cookie再次访问url,获取正确数据print getHtml(TARGET_URL, cookie)[0:500]]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-爬虫代理池]]></title>
    <url>%2F2019%2F01%2F11%2Fpython-%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[参考：https://www.cnblogs.com/jhao/p/6132768.html代码：https://github.com/jhao104/proxy_pool]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-多线程的使用]]></title>
    <url>%2F2019%2F01%2F09%2Fpython-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[参考：https://www.cnblogs.com/tkqasn/p/5700281.html 阻塞模式的使用： https://www.cnblogs.com/cnkai/p/7504980.html多线程方法一1234567891011import threadingimport time#方法一：将要执行的方法作为参数传给Thread的构造方法def action(arg): time.sleep(1) print 'the arg is:%s\r' %argfor i in xrange(4): t =threading.Thread(target=action,args=(i,)) t.start() 多线程方法二12345678910111213#方法二：从Thread继承，并重写run()class MyThread(threading.Thread): def __init__(self,arg): super(MyThread, self).__init__()#注意：一定要显式的调用父类的初始化函数。 self.arg=arg def run(self):#定义每个线程要运行的函数 time.sleep(1) print 'the arg is:%s\r' % self.argfor i in xrange(4): t =MyThread(i) t.start() 多线程属性和方法构造方法： Thread(group=None, target=None, name=None, args=(), kwargs={}) group: 线程组，目前还没有实现，库引用中提示必须是None； target: 要执行的方法； name: 线程名； args/kwargs: 要传入方法的参数。 实例方法： isAlive(): 返回线程是否在运行。正在运行指启动后、终止前。 get/setName(name): 获取/设置线程名。 start(): 线程准备就绪，等待CPU调度 is/setDaemon(bool): 获取/设置是后台线程（默认前台线程（False））。（在start之前设置） 如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，主线程和后台线程均停止 如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止 start(): 启动线程。 join([timeout]): 阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout（可选参数）。 t.setDaemon(True)#设置线程为后台线程centos进程下线程信息查看：参考： https://www.cnblogs.com/EasonJim/p/8098217.html 方法一：1ps -T -p 2446 方法二：1top -H -p 2446 方法三：12yum install -y htophtop]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web-ppt在线演示PPT]]></title>
    <url>%2F2019%2F01%2F07%2Fweb-ppt%2F</url>
    <content type="text"><![CDATA[web-ppthttp://mrpeak.github.io/2014/05/29/web-ppt/docs-onlinehttps://docs.zoho.com.cn 已注册workflow-onlinehttps://online.visual-paradigm.com/cn/login.jsp 已注册]]></content>
      <categories>
        <category>ppt</category>
      </categories>
      <tags>
        <tag>ppt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux扩swap]]></title>
    <url>%2F2018%2F12%2F27%2Flinux-%E6%89%A9%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[linux扩充swaplinux扩充swap 1GB查看当前swap：1free -m 增加swap:123dd if=/dev/zero of=/swapfile bs=1M count=1024mkswap /swapfileswapon /swapfile 自动挂载：12cat /etc/fstab/swapfile swap swap defaults 0 0 查看扩充后：1free -m 完]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人网盘-seafile的搭建与使用]]></title>
    <url>%2F2018%2F12%2F26%2F%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98-seafile%2F</url>
    <content type="text"><![CDATA[seafile个人云盘- 社区版免费，开源 - 基于python，全平台(win, linux, ios, android) - 提供控制台，并有组管理和分享功能 - 专业版可以与aws s3, ceph等接入 - 专业版提供病毒扫描和安全审查功能下载：download: https://www.seafile.com/download/ example: wget https://download.seadrive.org/seafile-server_6.3.4_x86-64.tar.gz参考文档：https://manual-cn.seafile.com/deploy/using_sqlite.html解压cd /opt/apps/mycloud # tree . -L 2 . ├── installed │ └── seafile-server_1.4.0_x86-64.tar.gz └── seafile-server-1.4.0 ├── reset-admin.sh ├── runtime ├── seafile ├── seafile.sh ├── seahub ├── seahub.sh ├── setup-seafile.sh └── upgrade环境准备：pip install --upgrade setuptools （pip install pillow moviepy 要不会报错） # on CentOS 7 yum -y install epel-release rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro yum -y install python-imaging MySQL-python python-memcached python-ldap python-urllib3 ffmpeg ffmpeg-devel pip install pillow moviepy(比较慢，需要多试几次)安装与配置：./setup-seafile.sh server name: zhangyh server ip/domain: 10.100.102.206 seafile data dir: /opt/apps/mycloud/seafile-data fileserver port: 8088 port of seafile fileserver: 8088 port of seahub: 8000启动与停止：run seafile server: ./seafile.sh { start | stop | restart } run seahub server: ./seahub.sh { start &lt;port&gt; | stop | restart &lt;port&gt; } 登陆： http://10.100.102.206:8000/ email/password ios客户端: seafile-pro使用：- 图像能在线查看，太大的无法显示 - 视频能在线播放 - .doc在pc web上无法查看，在ios cli上可以查看 - 其他类型文件未测试 - 局域网上传与下载速度很快 - 社区版支持目录上传，很方便 - 支持组管理、私有资料库管理很方便 - 支持自定义网盘名称、logo、背景、公司机构等 - 支持https问题排查：https://github.com/haiwen/seafile/wiki完]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-常见定时器]]></title>
    <url>%2F2018%2F12%2F21%2Fpython-%E5%B8%B8%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[python中常用的几种定时器参考链接:blush: 循环 sleep123456789from datetime import datetimeimport time# 每n秒执行一次def timer(n): while True: print(datetime.now().strftime("%Y-%m-%d %H:%M:%S")) time.sleep(n)# 5stimer(5) threading模块中的Timer123456789from datetime import datetimefrom threading import Timer# 打印时间函数def printTime(inc): print(datetime.now().strftime("%Y-%m-%d %H:%M:%S")) t = Timer(inc, printTime, (inc,)) t.start()# 5sprintTime(5) 使用sched模块123456789101112131415161718import schedimport timefrom datetime import datetime# 初始化sched模块的 scheduler 类# 第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。schedule = sched.scheduler(time.time, time.sleep)# 被周期性调度触发的函数def printTime(inc): print(datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)) schedule.enter(inc, 0, printTime, (inc,))# 默认参数60sdef main(inc=60): # enter四个参数分别为：间隔事件、优先级（用于同时间到达的两个事件同时执行时定序）、被调用触发的函数， # 给该触发函数的参数（tuple形式） schedule.enter(0, 0, printTime, (inc,)) schedule.run()# 10s 输出一次main(10) APScheduler定时框架1pip install apscheduler 123456789from apscheduler.schedulers.blocking import BlockingSchedulerfrom datetime import datetime# 输出时间def job(): print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))# BlockingSchedulerscheduler = BlockingScheduler()scheduler.add_job(job, 'cron', day_of_week='1-5', hour=6, minute=30)scheduler.start() 1234567891011121314151617181920212223242526272829from datetime import datetimefrom pymongo import MongoClientfrom apscheduler.schedulers.blocking import BlockingSchedulerfrom apscheduler.jobstores.memory import MemoryJobStorefrom apscheduler.jobstores.mongodb import MongoDBJobStorefrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor# MongoDB 参数host = '127.0.0.1'port = 27017client = MongoClient(host, port)# 输出时间def job(): print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))# 存储方式jobstores = &#123; 'mongo': MongoDBJobStore(collection='job', database='test', client=client), 'default': MemoryJobStore()&#125;executors = &#123; 'default': ThreadPoolExecutor(10), 'processpool': ProcessPoolExecutor(3)&#125;job_defaults = &#123; 'coalesce': False, 'max_instances': 3&#125;scheduler = BlockingScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults)scheduler.add_job(job, 'interval', seconds=5, jobstore='mongo')scheduler.start() 完]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运维各种知识链接]]></title>
    <url>%2F2018%2F12%2F20%2F%E8%BF%90%E7%BB%B4%E5%90%84%E7%A7%8D%E7%9F%A5%E8%AF%86%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[运维各种知识链接：原文：https://www.cnblogs.com/uglyliu/p/6185943.html如下：http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/sar.html #linux排查问题命令 http://www.guxiaobei.com/ #顾小北营销博客 https://wilhelmguo.tk/blog/post/william/360%E6%90%9C%E7%B4%A2%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5 #360 kubernetes大拿郭少巍 https://www.fanhaobai.com/ #樊海潮博客 https://blog.csdn.net/u011303443/article/details/50992651 #在word完美插入代码 http://www.yfshare.vip/2018/03/14/Prometheus%E7%9B%91%E6%8E%A7TLS-Kubernetes%E9%9B%86%E7%BE%A4/ #写文档使用prometheus监控k8s集群 https://blog.jaggerwang.net/cloud-native-monitor-system-prometheus-intro/ #实验楼promethues讲师博客 http://www.90geek.com/post/k8s%E4%B9%8Bssl%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E9%83%A8%E7%BD%B2-ca%E8%AF%81%E4%B9%A6%E5%88%9B%E5%BB%BA.html #k8s在生产环境的使用总结 http://www.songjiayang.com/ #prometheus布道者 https://kubernetes.feisky.xyz/fu-lu/mirrors #k8s1.11大佬博客 https://jicki.me/kubernetes/2018/02/01/prometheus-monitoring.html #prothemeus+granfa部署 http://ibash.cc/frontend/article/90/ #prometheus监控k8s特别推荐 https://blog.csdn.net/huwh_/article/details/77017353 #k8s概念大集合 https://www.imuo.com/a/afa54e394b7a0c1293363e935bf1a380fe87b927f29ce79777c178f461370be6 #keep+alived+k8s https://blog.cactifans.com #zabbix大牛张思德博客 http://docs.kubernetes.org.cn/115.html #k8s中文文档 https://supereagle.github.io/2017/07/26/docker-image-name-convention/ #docker镜像命名 https://jimmysong.io/kubernetes-handbook/practice/master-ha.html #华为k8s文档 https://ivanzz1001.github.io/records/post/docker/2018/04/11/docker-harbor-uage#1-%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6 #harbor中文手册 https://www.tracymc.cn/archives/1371 #harbor参考博客 http://www.recall704.com/ #k8s源码分析大佬 https://imroc.io/ #k8s大佬博客 https://www.linuxea.com/ #elk6.3.2破解 https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart #普罗米修斯中文进阶文档 https://love2.io/@1046102779/doc/prometheus/introductions/overview.md #普罗米修斯中文文档 http://blog.pytool.com/ #go大神 https://note.eduocloud.com/blog/bluetom520 #懒懒的天空+zabbix图文报警 http://xstarcd.github.io/wiki/shell/index.html #常用命令详情使用 https://kiwenlau.com/2018/07/19/technology-selection-is-not-critical/ #docker大神，fundbug创始人 https://blog.fleeto.us/ #k8s大神 https://www.jianshu.com/p/35b03c82f9fd #动态管理nginx https://zhimap.com/gallery #流程图汇总 http://www.dockerinfo.net #docker中文文档 http://blog.51cto.com/13527416/2132270 #前百度工程师之亿级elk优化 https://www.cnblogs.com/Anker/p/6112022.html #Confd+etc实现动态更改nginx配置 http://cwiki.apachecn.org/pages/viewpage.action?pageId=4882625 #ELK部署到优化 https://blog.csdn.net/laoyang360 #ELK大牛老杨 https://blog.csdn.net/wangbin579/article/details/7828249 #tcpcopy作者王斌 http://www.cnblogs.com/yjmyzz/p/spring-cloud-zuul-demo.html #微服务大神，spring不停机发布 http://blog.51cto.com/lizhenliang #高级运维工程师-李振良 https://t.hao0.me/devops/2016/05/20/log-sys-build.html #统一日志平台 http://www.cnblogs.com/liuning8023/p/5502460.html #grok插件大佬 https://anbc.gitbooks.io/elk-handbook/content/81grokzheng_ze_guo_lv_qi_pei_zhi.html #elk手册 http://blog.51cto.com/jinlong #IT 外卖小哥之elk http://www.cnblogs.com/zhangs1986/p/7466992.html #大牛之haproxy https://www.zxblinux.com/ #jenkins系列文档 https://zabbix.com/documentation/3.4/zh/manual/web_interface/frontend_sections/administration/authentication #zabbix中文文档 https://blog.csdn.net/wylfengyujiancheng/article/details/51868979 #openstack常见问题汇总 http://blog.csdn.net/super_rd/article/details/70856909 #rabbitmq大牛 http://blog.csdn.net/xiegh2014 #elk大佬 https://www.fucksec.com/bug/ #腾讯云主机购买流程 https://mengkang.net/994.html #nginx安装lua模块【阿里云大佬周梦康】 https://qtdebug.com/mac-nginx-lua/ #nginx安装lua模块【线上使用】 https://www.jianshu.com/p/8f8c2b5ca2d1 #解决nginx在记录post数据时 中文字符转成16进制的问题 http://zyan.cc/post/271/ #张宴博客 https://www.kubernetes.org.cn/3546.html/7 #k8s视频 https://geewu.gitbooks.io/rabbitmq-quick/content/RabbitMQ%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E7%BD%AE%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E8%AE%A8%E8%AE%BA.html #rabbitmq可靠文档 http://rdc.hundsun.com/portal/article/709.html #kafka揭秘 http://www.longma.tk/ #博客李彬 http://www.roncoo.com/article/detail/130255 #如何建立高可用消息中间件kafka https://www.youhro.com/sb_beijing/ #北京公积金纳税计算 http://salarycalculator.sinaapp.com/city/beijing #北京公积金纳税计算 http://www.qb5200.tw/xiaoshuo/13/13248/#罗军小说 http://www.cnblogs.com/Eivll0m/ #docker+compose大神 https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#use-multi-stage-builds #dockerfile最佳实践 http://www.lepus.cc/ #数据库监控天兔 http://blog.fens.me/mysql-ibdata1/ #数据库ibdata缩容详解 http://0000-bigtree.github.io/blog/2017/03/05/get-java-process-stack.html #java集成jmap使用 https://lug.ustc.edu.cn/wiki/start #中国科学技术大学Linux用户协会 https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html #elk常用架构解析 http://www.ncfdc.com.cn/ #南昌房产信息网 http://blog.51cto.com/irow10/1812638 #mail带sls https://o-my-chenjian.com/2016/07/04/Easy-With-Docker/ #docker大神 http://blog.csdn.net/SweetyoYY/article/details/78388524 #docker部署swagger http://blog.devzeng.com/blog/build-docker-image-with-dockerfile.html #docker+nexus https://www.kancloud.cn/devops-centos/centos-linux-devops/392438 #运维工作笔记 https://www.bbsmax.com/A/1O5EDRn3J7/ #gitlab同步后报500错误解决办法 https://klionsec.github.io/2017/11/18/lsyncd/#menu #lsyncd同步 http://docs.flycloud.me/docs/ELKStack/index.html #elk5.0相关 https://api.aliyun.com/?spm=a2c1g.8271268.10000.2.7f83395fp3yTdE #阿里云api文档 https://huataihuang.gitbooks.io/cloud-atlas/os/linux/redhat/system_administration/systemd/systemd_clear_journalctl.html #journal日志清理 http://www.ssserver.cc/#type=5 #ss共享平台 https://help.aliyun.com/document_detail/28088.html #EMR集群文档 https://www.kancloud.cn/thinkphp/django-book/39583 #django 2.0中文文档 https://phabricator.webfuns.net/book/phabricator/ #phabricator代码审查工具 http://www.dongwm.com/ #董伟明 豆瓣高级python开发工程师 http://tshare365.com/archives/2130.html #代码发布流程以及回滚流程 https://walle-web.io/ #代码发布系统 http://www.huangdc.com/13 #发布系统需求 http://orchome.com/kafka/index #kafka教程 http://ifeve.com/redis-lru/ #redis缓存清理相关 http://blog.csdn.net/dc_726/article/details/48552531 #redis集群 https://www.ienuo.top/?p=45 #redis-cluster集群维护经验 https://www.cnblogs.com/BlueskyRedsea/p/6735699.html 编译安装boost库 http://blog.csdn.net/q229827701/article/details/51830508?locationNum=9&amp;fps=1编译安装boost库 http://bigcat2013.iteye.com/ #bigdata daniu http://python-gitlab.readthedocs.io/en/stable/gl_objects/groups.html #python-gitlab https://doc.yonyoucloud.com/doc/django-web-app-book/index.html #the fire of the django http://blog.51cto.com/hequan #CMDB何全 http://blog.kukafei520.net/ #大佬CMDB/发布系统 http://edu.51cto.com/center/course/user/get-study-course #Reboot公开课 http://blog.51cto.com/51reboot #51reboot博客 http://vearne.cc/archives/75 #业务日志收集方案 http://vearne.cc/ #萌叔程序员 https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge #redhat服务器资料 https://tool.lu/ #资料大全 http://okeeper.leanote.com/post/linux-%E6%9F%A5%E6%89%BE%E6%97%A5%E5%BF%97%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%8A%80%E5%B7%A7 #查找日志的一些技巧 http://okeeper.leanote.com/post/centos-%E5%AE%89%E8%A3%85redis-%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4 #部署redis集群 http://blog.51niux.com/ #elk大牛 https://www.41ms.com/ #lua+nginx https://www.kancloud.cn/i281151/svn/197098 #svn详解 http://www.cnblogs.com/wspblog/ #django_api大佬 http://blog.51cto.com/732233048/1677843 #salt模块详细讲解 http://blog.51cto.com/ywzhou #oms系统开发者 http://blog.csdn.net/u010019717 #游戏开发者 http://www.colasoft.com.cn/ #科来网络学习 http://blog.csdn.net/terence1212 #redis源码剖析 https://zcheng.ren/ #redis源码剖析 http://blog.51cto.com/7140238/1627053 #jenkins api http://www.cnblogs.com/Anker/p/6112022.html #nginx配置文件动态配置 http://ys.tyfdc.gov.cn/Firsthand/tyfc/publish/p/ProjectList.do #备案查询 http://lee2013.iteye.com/blog/2108612 #jenkins更改 http://blog.csdn.net/u012163684/article/details/52433645 #git http模式免秘钥 http://9dic.com/ios/2016/02/25/global-credentialhelper-osxkeychain/ #git http模式免秘钥 http://www.heminjie.com/email/437.html #自建zimbra邮件服务器 http://kt.xuliangwei.com/15099321047799.html #标杆徐整理的文档 http://www.hktxcn.com/producturl.html #汇科jira下载处 https://www.cwiki.us/pages/viewpage.action?pageId=3310730 #confluence中文详细教程 http://www.fyluo.com/?post=84 #VPN链接报错解决 http://idea.liyang.io/ #激活Jetbrains旗下任意产品的时候选择激活服务器 https://liyuans.com/archives/cpu-mining-monero.html #比特币 http://blog.xiaoxiaomo.com/ #大数据工程师（flume+hdfs） http://www.cnblogs.com/edisonchou/p/4449082.html #大数据联系项目 http://www.cnblogs.com/smallSevens/archive/2017/11/20/7860461.html #Prometheus监控系统+ELK http://www.blogjava.net/kuuyee/ #光子+jenkins http://www.cnblogs.com/zishengY/p/6819160.html #搭建hadoop-2.7.1+监控报警 http://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/ #shadowacks实现原理 http://blog.mallux.me/2017/02/27/gitlab/ #gitlab高可用架构 https://linux.cn/article-9048-1.html #gitlab高可用架构2 https://datascience.weidian-inc.com/ #微店数据团队博客 http://blog.51cto.com/itstyle/1973633 #查看进程实时流量命令+elk报警问题 http://www.jianshu.com/p/e154c2ef002f #nginx中location指令匹配 http://www.cnblogs.com/peida/archive/2012/12/04/2800684.html #每天一个linux命令 http://www.wowenda.com #网盘搜索 https://www.tutorialspoint.com/maven/maven_pom.htm #maven官方教程 http://10880347.blog.51cto.com/346720/1932112 #ceontos6.8安装mysql5.6 https://www.itjuzi.com/ #创业公司网址 http://www.cnblogs.com/moonandstar08/ #kafaka收集日志相关 http://www.cnblogs.com/itech/archive/2009/04/10/1433052.html #软硬连接生动博客 https://www.w3cschool.cn/jenkins/jenkins-627f28pt.html #jenkins之pipeline http://www.cnblogs.com/ding2016/p/7568436.html #jira和confluence打开缓慢，调整jvm参数博客以及elk5.4yum搭建 http://blog.csdn.net/jiuqiyuliang #elk大牛 https://www.draw.io/ #drawio http://www.bichi.me/read/19733/47793044.html #罗军小说最新 http://www.jianshu.com/u/f117d0449642 #ios客户端下载使用 http://blog.willdx.me/ #xs-pack破解文章 http://www.blogjava.net/hankchen/archive/2012/05/09/377735.html #java程序高CPU解决办法 https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/index.html #elk资料大全 http://www.voidcn.com/article/p-heyswfov-boa.html #公司日志系统从无到有 https://zhuanlan.zhihu.com/p/26399963 #创业公司kibana应用 http://china.blogs.atlassian.com/2013/04/12/jql/ #中文jql文档 http://blog.csdn.net/knighttools/article/details/52128568 #jira详细的教程 http://www.yixiangzhan.com/ #大牛异想天开 http://blog .csdn.net/bryce123phy/article/details/51711872 #jvm调优 http://www.llbee.com/ #xsenserver http://www.tyfdc.gov.cn/ #太原房产信息网 http://pm.szsharelink.com/confluence/pages/viewpage.action?pageId=11960650 #confluence权限设置 https://www.cwiki.us/pages/viewpage.action?pageId=2393239 #confluence各种宏使用办法 http://blog.didispace.com/atlassian001/ #jira产品管理经验 http://www.cnblogs.com/kevingrace/p/6093671.html #关于nginx上传文件大小的配置 http://www.itnose.net/detail/6501610.html #成功通过mysql找回admin密码 http://www.cnblogs.com/jaychang/ #自定义工作流+自定义字段 http://www.confluence.cn/pages/viewpage.action?pageId=1671341 #jira中文官网 http://www.confluence.cn/pages/viewpage.action?pageId=9275312 #confluence使用案例 http://debugtalk.com/post/confluence-simple-tutorial/ #confluence使用文档 https://www.cwiki.us/pages/viewpage.action?pageId=2393002 #confluece中文文档 http://blog.csdn.net/boonya #jira+docker http://blog.csdn.net/gitchat/article/details/78271099 #jenkins自动部署django http://blog.csdn.net/kerwinchung #jira大牛博客 http://www.cnblogs.com/wupeiqi #武sir博客 http://blog.csdn.net/happylee6688/article/details/38926791 #jira插件和工作流 http://www.cnblogs.com/boonya/p/3894491.html #jira定制工作流 http://www.cnblogs.com/kevingrace/p/7607442.html #jira7.4.1+confluence6.3.6破解博客 https://yq.aliyun.com/video/TagSearch/cid_15105?spm=5176.100242.video-search-cata.5.abJdGT #阿里云培训视频 http://www.360doc.com/content/17/0823/08/4684151_681406843.shtml #jira工作流设置 http://blog.csdn.net/koukan3/article/details/65436478 #jira使用博客 http://glz.me/2010/27 #jira工作流 http://www.runoob.com/w3cnote/set-ssh-login-key.html #用户使用秘钥登录 http://www.confluence.cn/display/quickstart/jira #jira手册 http://atlassian.csdn.net/ #confluence+jira中文官网 https://confluence.atlassian.com/display/JIRA063/Defining+&apos;Status&apos;+Field+Values https://jira.atlassian.com/browse/JSWSERVER-14782 #应用程序导航栏导致的agile插件报错问题解决办法 http://www.unlimax.com/jira-software.html #敏捷管理jira官网 http://debugtalk.com/post/confluence-simple-tutorial/ #confluence如何使用博客 https://my.atlassian.com/products/index #Atlassian许可证官网 http://blog.csdn.net/five3/article/details/51012352 #jira6.3.6+zephyr破解 http://www.jianshu.com/p/84c203af9b1e #jira破解+Agile插件+zephyr破解 http://blog.csdn.net/ssdfsfdf/article/details/50602442 #centos6.5安装confluence5.1.2 http://blog.csdn.net/qiaqia609/article/details/77861975 #centos6.8安装mysql5.6 https://www.centos.bz/2017/09/docker%E9%83%A8%E7%BD%B2gitlab/ #docker部署gitlab https://docs.gitlab.com/omnibus/docker/ #docker部署gitlab官方文档 https://www.dtstack.com/about #袋鼠云 http://www.wowenda.com/ #网盘搜索 http://blog.csdn.net/a877415861/article/details/74544086 #jenkins部署django程序 http://docs.python-guide.org/en/latest/ #python大声文档 http://skyseraph.com/2016/07/18/Tools/Jenkins%20Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%89%93%E5%8C%85%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/ #jenkins文档编写手册 https://imaojia.com/blog/linux/setup-openldap-on-gitlab/ #gitlab整合openldap官方文档 http://www.cnblogs.com/baolong/p/5969337.html #openldap+gitlab https://www.58jb.com/html/120.html #58同事至gitlab和ldap整合 https://docs.gitlab.com.cn/omnibus/settings/configuration.html #gitlab中文文档 https://blog.tutum.co/2014/05/27/containerize-your-database-volume-with-tutum-mysql-images/ #docker大神 http://blog.csdn.net/jackny9/article/details/51114325 #openstack软重启和硬重启的区别 http://www.micmiu.com/ #mycat开源贡献大牛之hadoop专家 http://blog.csdn.net/dreamcode #Mycat开源贡献大牛之高级DBA http://songwie.com/ #mycat开源贡献大牛 http://mycat.io/ #mycat官网 http://www.12306bypass.com/ #抢票软件 http://www.jianshu.com/p/d1dd8a982264 #linux资料大全 http://xiaoluoge.blog.51cto.com/ #cobbler_api http://www.fuuyun.org/ #openstack高手 http://hequan.blog.51cto.com/ #django高手何全 http://www.linuxyw.com/ #广州戴儒峰 http://dreamway.blog.51cto.com/ #老男孩推荐架构师班博客 http://blog.itpub.net/29654823/viewspace-1222446/ #lvm分区见过解释最清楚的文章 http://www.jianshu.com/p/7f5c019c528b #MAC SVN使用文档 http://www.funet8.com/2291.html #阿里云磁盘合并 http://www.confluence.cn/pages/viewpage.action?pageId=2097210 #jira+confluence较详细的博客 https://github.com/sumory/openresty-china #防ruby社区 https://git-scm.com/book/zh/v1/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-Git-%E4%B8%8E-Subversion #用svn实现git的功能 http://732233048.blog.51cto.com/9323668/1723322 #jdk版本共存 https://peanut7379.github.io/ #docker安装jira http://blog.csdn.net/wh211212/article/details/76020723 #jira安装及破解 http://aqzt.com/ #安全运维专区 https://bbs.aqzt.com/forum.php #运维社区 http://www.cnblogs.com/madsnotes/articles/6601183.html #盛大自动化知识 http://blog.csdn.net/watermelonbig/article/details/77102187 #spark_cdh http://blog.csdn.net/onlyforcloud #cdh大神 https://www.cloudera.com/documentation/enterprise/release-notes/topics/rg_vd.html #clouda官网 http://blog.csdn.net/watermelonbig/article/details/77102187 #cloud大数据部署博客 http://seanlook.com/2015/05/06/lsyncd-synchronize-realtime/ #lsyncd实时备份 http://blog.csdn.net/blaketairan/article/details/67654450 #gitlab实时备份参考 http://clavinli.github.io/2013/11/12/linux-server-lsyncd/ #lsyncd相关 http://www.cnblogs.com/rwxwsblog/p/5725710.html #svn迁移git http://www.crackedzone.com/ #线上服务器初始化参考文档 https://gitlab.com/gitlab-org/omnibus-gitlab/issues/1067 #gitlab备份失败权限问题 http://www.powerxing.com/about/ #厦门大学spark爱好者 https://docs.gitlab.com.cn/ #gitlab中文社区 http://www.jianshu.com/p/5d02428f313d #配置sudo免秘钥 https://help.aliyun.com/document_detail/25426.html #阿里云给附加的磁盘分区 https://my.oschina.net/mickelfeng/blog/839119 #使用parted分大于2T的磁盘 http://www.cnblogs.com/shishanyuan #spark大神 http://www.cnblogs.com/tgzhu/p/5818374.html #spark相关 http://hustlijian.github.io/tutorial/2015/06/19/Hadoop%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html #hadoop入门以及python的小应用 https://segmentfault.com/a/1190000002737213 #几种同步文件的工具使用 http://blog.fens.me/hadoop-family-roadmap/ #hadoop家族 http://www.cnblogs.com/datang6777/p/7003319.html #查看日志奇淫技巧 http://blog.csdn.net/lizhe_dashuju #大数据博客 http://blog.csdn.net/fengjianbang/article/details/73457509 #gitlab日志系统简介 https://www.hellogcc.org/?p=34127 #使用gitlab-shell限制用户ssh登录 https://gaohaoyang.github.io/2016/07/07/git-clone-not-master-branch/ #gitlab检出非master上的代码 http://www.lofter.com/tag/SSH #ssh论坛 http://www.iyunw.cn/archives/jenkins-gitlib-chi-xu-ji-cheng-san-jenkins-gitlab-tong-guo-rsync-jiao-ben-wu-cha-yi-bei-fen/ #gitlab+jenkins https://www.zhihu.com/question/20003204 #阿里分布式gitlab参考 https://docs.gitlab.com/ce/administration/logs.html #gitlab几种日志详细说明 http://www.cnblogs.com/cmsd/p/3707405.html #linux操作日志详细记录 http://www.php101.cn/2014/11/26/git-sumary-of-comonly-used-comands/ #git命令大全 https://www.hellogcc.org/?p=34127 #限制git-shell登录 http://www.nakedape.cc/git/git-shell-ssh.html #gitlab-shell相关 http://zhaochj.github.io/ #shell脚本部gitlab http://www.jianshu.com/p/7e7f02da18b5?open_source=weibo_search #预合并jenkins博文 http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins-details/ #jenkins编译 http://www.cnblogs.com/yangxia-test/p/4366172.html #jenkins邮箱问题 https://www.bbsmax.com/R/MyJxWkXRzn/ #bat脚本传参 http://www.voidcn.com/blog/10267776/article/p-6243642.html #jenkins相关 https://github.com/viva64/how-to-use-pvs-studio-free #pvs-studio http://blog.csdn.net/ggz631047367/article/details/50573201 #gitlab_webhook相关 https://laravel-china.org/ #gitlab_webhook相关 http://www.jianshu.com/p/ad018160aff9 #Jenkins+git+webhook自动触发部署和测试任务 http://answ.me/ #关于gitlab中的webhook https://6so.so/forum.php #破解网站 https://github.com/yeasy #杨宝华docker大神 https://wing324.github.io/2016/05/31/zabbix%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B%E6%88%96%E7%AB%AF%E5%8F%A3/ zabbix监控端口 http://blog.hwangjr.com/2016/06/11/GitLab%E4%B8%8ESVN%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/ #gitlab和svn同步 http://www.ehcoblog.ml/ #ss大牛写的博客 http://www.voidcn.com/blog/coffeecato/article/p-6376343.html #svn出异常的解决办法 http://www.linuxidc.com/Linux/2017-02/141043.htm #gitlab修改端口的git clone方法 http://www.linuxdiyf.com/linux/20191.html #初次安装的git提交有问题解决方案 http://www.crackedzone.com/svn-transfer-gitlab.html #svn迁移至gitlab https://alanhou.org/category/%E7%94%B5%E5%95%86%E7%BB%8F%E9%AA%8C/ #zabbix+电商经验 https://www.bbsmax.com/A/x9J2LmZd6o/ #jenkins打包相关 https://www.kancloud.cn/zwhset/golang/358314 #茶总go笔记 http://www.importnew.com/23921.html #gitlab持续集成 https://teakki.com/p/57dbbbc59128129803f3aba5 #centos系统大全资料 http://www.restran.net/2016/07/06/gilab-source-install-in-centos7/ #gitlab备份参考文档 https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/raketasks/backup_restore.md #gitlab备份官方文档 https://zhangmengpl.gitbooks.io/gitlab-guide/content/whatisgitflow.html #git-flow相关 http://yixinglu.com/gitlab-workflow #gitlab操作流程 https://github.com/shadowsocks/shadowsocks/tree/master #shadowsocksgithub https://zyfzyfhaha.github.io/2017/04/10/%E5%9C%A8VPS%E4%B8%8A%E6%90%AD%E5%BB%BAShadowsocks%E5%87%BA%E5%9B%BD%E7%9C%8B%E7%9C%8B%5E%5E/ #成功FQ搭建博文 https://doub.io/ss-jc10/ #FQ博文 https://stackoverflow.com/questions/25819795/redmine-an-error-occurred-while-installing-mysql2-0-3-16-and-bundler-cannot #gitlab安装问题解决办法 https://teddysun.com/392.html #FQ博文 http://www.yanjunhui.com/2017/05/15/shadowsocks/ #闫军辉搭建FQ服务 https://zyfzyfhaha.github.io/2017/04/10/%E5%9C%A8VPS%E4%B8%8A%E6%90%AD%E5%BB%BAShadowsocks%E5%87%BA%E5%9B%BD%E7%9C%8B%E7%9C%8B%5E%5E/ #搭建FQ工具博客 https://doub.io/ss-jc10/ #FQ工具安装包 https://www.v2ex.com/ #技术社区 https://huoding.com/2014/12/31/407 #nginx缓冲区问题 http://www.jianshu.com/p/e21894fc5501 #python操控excel相关 http://www.cyysu.cn/ #燕山大学牛逼人物 https://foofish.net/ #python之禅作者 http://www.cnblogs.com/vamei #python大神 https://itchat.readthedocs.io/zh/latest/ #itchat--&gt;python开源和微信相关 http://zmrenwu.com/ #django大神 http://www.pythonzh.cn/ #开源django写的社区 http://www.jianshu.com/p/343a7a6fd106 #python开源BBS http://djangobook.py3k.cn/2.0/ #django中文翻译 http://blog.blkart.org/ #zabbix监控openstack相关 http://www.cnblogs.com/crazyacking #git命令 http://www.hairuinet.com/ #老男孩学生python_restapi http://cuiqingcai.com/ #静谧爬虫博客 https://github.com/guohongze #漂亮的CMDB https://github.com/v55448330 #基于flask做的docker镜像页面 https://cread.jd.com/read/startRead.action?bookId=30334131&amp;readType=1 #openldap电子书 http://guodayong.blog.51cto.com/ #openldap作者 http://blog.csdn.net/fx677588/article/details/58164902 #pycham激活码 http://jaminzhang.github.io/ http://blog.csdn.net/dog250/article/details/6990814 #openvpn深入了解 https://github.com/MOxFIVE/hexo-theme-yelee #hexo双栏博客 http://zmrenwu.com/ #史上最详细的django建站博客 http://9inet.cn/ #新的资源 https://liangxiansen.github.io/ #大神置顶 https://github.com/ansible/ansible #ansible源码 http://www.codexiu.cn/python/blog/36230/ #多进程使用paramiko http://www.cnblogs.com/wupeiqi/articles/4906230.html #python大牛 http://467754239.blog.51cto.com/4878013/1619166 #简易CMDB http://www.kancloud.cn/jfedu/python #京峰python分享 http://world77.blog.51cto.com/414605/707081/ #paramiko上传文件 http://467754239.blog.51cto.com/4878013/1619323 #paramiko分发多个文件博客处 https://github.com/roncoo/roncoo-cmdb #开源cmdb https://github.com/xiaoluoge11/lmanager/tree/master/CMDB #开源CMDB https://github.com/shengxinjing/woniu-cmdb #cmdb https://github.com/unixhot #赵班长github https://github.com/shengxinjing/my_blog/issues #蜗牛cmdb博客 http://blog.51reboot.com/ #reboot python博客 http://smilejay.com/2013/03/python3-mysql-connector/#kvm连载 https://zhuanlan.zhihu.com/p/20385707 #flask_monitor https://github.com/shengxinjing/my_blog/issues #python博客 https://zhuanlan.zhihu.com/p/20385707 #知乎前360大牛 http://123.56.29.218:8000/home #思远博客 http://docs.jinkan.org/docs/flask/index.html #flask3中文文档 http://apistore.baidu.com/astore/serviceinfo/1866.html http://www.cnblogs.com/MikeZhang/p/pythonDeamon_20150307.html #大神博客 http://llzdwyp.blog.51cto.com/6140981/1761057 #老男孩学生 https://github.com/jijianming/cmdb #同期学友cmdb http://bawang.zwhset.com #jf产品 http://www.cnblogs.com/voidsky #爬虫 http://www.jianshu.com/users/30f737ee0051/latest_articles #有趣的简书朋友 http://www.cnblogs.com/feixuelove1009/p/5660126.html #IO多路复用 http://www.rowkey.me/blog/2015/09/09/load-analysis/ #大牛，后端技术杂谈 http://www.rowkey.me/ #后端技术杂谈 http://coolshell.cn/articles/17416.html #coolhell大神陈浩博客 https://github.com/pzxwhc #微服务大神 http://www.rowkey.me/blog/2014/09/24/nginx-bootstrap/ #nginx源码启动过程 http://srhang.iteye.com/ #老博客 http://www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/ #互联网后端基础设施 http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651745239&amp;idx=1&amp;sn=60490558770ade79fd9f1e88f9c7c0ac&amp;scene=1&amp;srcid=0617o5PapWXlKUP4OxSzA7KE#rd #美团点评技术团队 http://www.cnblogs.com/hsydj/p/5303050.html #有赞大神博客之搜索引擎 http://git.oschina.net/qiangzigege/MySQL-Binlog #mysql-binlog源码 http://www.jianshu.com/users/f0e995b95f0e/latest_articles #网站开发大神 http://www.rowkey.me/blog/2016/11/02/java-profile/ #java调优 https://github.com/triaquae/PerfectCRM #alex作品 http://fishcried.com/2016-02-19/iptables/ #防火墙相关 http://www.cnblogs.com/liu-yao/ #刘耀博客 http://www.ibm.com/developerworks/cn/aix/library/0910_jiangpeng_unixdisk/ #IBM对磁盘IO的思想 http://www.linuxea.com/949.html #salt-key有关 http://www.roddypy.com/ #普拉多VS，灰度发布 http://youngfor.me/post/tech/saltshi-fen-zhong-ru-men #salt十分钟系列 https://cloud.baidu.com/doc/RDS/Resources/29.5C.E6.95.B0.E6.8D.AE.E6.BA.90.E4.B8.BAMySQL.html #百度云数据库导入导出步骤 https://github.com/netkiller/logging #操作日志github https://mmonit.com/monit/ #文件监控利器 http://www.mobile-open.com/2016/979087.html #移动端开发 http://www.python888.com/cx/186.html #同期python学员陈鑫 http://sparkdata.org/?p=271 #京东保障部博客 http://www.xianlaigame.com/ #闲来互娱官网 http://www.infocool.net/ #各种杂货铺 http://jaminzhang.github.io/categories/#SaltStack #saltstack相关 http://www.cnblogs.com/taosim/articles/3760812.html #saltstack各种模块 http://www.echojb.com/perl-python/2016/11/18/262156.html #python发工资脚本 http://www.cnblogs.com/lhj588/archive/2012/01/06/2314181.html #读取excel模块 http://www.cnblogs.com/deartear/ #python发工资脚本 https://github.com/biezhi?tab=stars #大神java_github http://ouyangyewei.me/ #shell大神 http://www.cnblogs.com/xiaoshi1991/archive/2012/09/20/2695645.html #发邮件之内 https://github.com/rfyiamcool #大神峰云github https://note.gitcloud.cc/blog/bluetom520 #群友博客，zabbix报警相关 http://www.voidcn.com/blog/wulex/article/p-6205416.html #python中orm模块写的很清楚和简洁 http://www.yanjunhui.com/ #运维总监闫军辉 http://hexo.lanzhishi.org/ #懒执事博客 http://www.cnblogs.com/wintersun/p/3930900.html #gitlab相关 https://jirry.me/2016/04/19/dnsmasq-on-aliyun/ #阿里云内网DNS搭建 https://www.softwarecollections.org #软件大全所在处 http://www.52devops.com/ #马亮大神 http://www.abcdocker.com/ #18岁后生，后生可畏 http://www.fblinux.com/?p=40 #elkstack https://www.gitbook.com/book/colinleefish/openstack-end-user-guide-simplified-chinese/details #openstack详细文档 https://nginx.ren/ #python大神博客 https://blog.cunss.com #salt大牛相关 http://www.msits.com/ #右链 http://jaminzhang.github.io/ #赵班长高徒 http://blog.liuyao.me/ #liuyao博客 http://www.unionsmart.cn/ #三明治 http://lanzhishi.org/ @懒职事 https://github.com/iyaoyao #liuyao_gitlab http://www.cnblogs.com/linkenpark #openstack部署 http://www.bladewan.com/2017/02/09/killo_newton #容器部署openstack http://www.cnblogs.com/iwangzheng/ ##ssh-copy-id有关 ttps://www.zhangluya.com/ #运维经理博客 http://www.chenshake.com/ #九州云总裁 http://heylinux.com/ #helinux http://adam.younglogic.com/ #外国人博客 http://dbanotes.net #杭州冯大辉 http://way4ever.com/ #陈沙克大牛好友 http://jaseywang.me/ #陈沙克好友 http://www.z-dig.com/ #老男孩学生和陈沙克好友 http://tools.zhaishidan.cn/ #各种资料集合 http://zh.learnlayout.com/position.html #各种css属性 http://jquery.cuishifeng.cn/index.html #jquery官方网站 https://www.ibm.com/developerworks/cn/java/j-lo-apache-subversion/ #svn安全相关 http://stackoverflow.com/questions/19218445/tortoisesvn-checkout-failed-error-svn-e120106-ra-serf-the-server-sent-a-trunc #svn报http_response错误 https://teddysun.com/326.html #http开启压缩机制 https://github.com/brunowang #思远go博客github http://www.cnblogs.com/liaojiafa/ #廖家发博客 http://nginx.taohui.org.cn/ #陶辉大神博客 http://www.cnblogs.com/CloudMan6/ #openstack大神cloudman http://answ.me/post/comment-in-django-part-2/ #django多级评论 https://www.dannysite.com #django大神博客 http://www.21yunwei.com #老男孩架构班学生博客 http://www.cnblogs.com/sagech/ #maven相关 http://www.cnblogs.com/chenchao1990/p/5284237.html #wusir学生，关于django http://ywzhou.blog.51cto.com/ #django+saltstack http://renzhiyuan.blog.51cto.com/10433137/1898689 #任志远，记一次和总监的谈话 http://dl528888.blog.51cto.com/2382721/1902274 #防DDoS http://wangwei007.blog.51cto.com/ #京东资深DBA https://github.com/qitan/icomments #嵌套评论 https://github.com/qitan/SOMS https://github.com/binbin91/oms https://imaojia.com/blog/django/django-nested-comments-icomments/ http://qunee.com/ #html画机房图 http://www.aboutyun.com/thread-6747-1-1.html #openstack的一些库环境 http://forta.com/books/0672327120/ #mysql必知必会网址 https://testerhome.com/jobs #求职网站 http://www.cnblogs.com/sammyliu/ #openstack大牛 http://www.simapple.com/346.html #docker知识 https://github.com/tutumcloud #docker相关的各种东西 http://blog.thislinux.com/blog/24.html #svn容量规划+google动态命令 http://www.3mu.me/linux%e4%b8%8bsvn%e7%9a%84%e8%87%aa%e5%8a%a8%e5%a4%87%e4%bb%bd%e4%b8%8e%e8%bf%98%e5%8e%9f%ef%bc%88%e5%b8%a6shell%e8%84%9a%e6%9c%ac%ef%bc%89/ #svn备份脚本 http://blog.uedao.com/ #docker多容器部署lnmp架构 http://www.cnblogs.com/kevingrace/p/6114336.html ##gitlab修改邮箱有关 https://github.com/gitlabhq/gitlab-recipes/tree/master/install/centos #centos6.8源码安装gitlab http://www.cyysu.cn/2017/03/14/Gitlab%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/ #成功搭建gitlab博客 https://bbs.gitlab.com.cn/topic/41/%E4%BD%BF%E7%94%A8nginx%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D-%E4%BB%A3%E7%90%86gitlab/2 #gitlab中文社区 https://yxnt.github.io/2015/12/23/gitlab-install/ #gitlab参考博文 https://chenjiehua.me/linux/gitlab-server-follow-up.html #gitlab参考博文 https://my.oschina.net/u/1865865/blog/655803 #gitlab参考博文 https://karmalove.github.io/2017/03/10/centos6-set-up-gitlab/ #gilab工作流程 https://github.com/btfak/gitlab-recipes/blob/bffe5a60f063720053ea90973ade8e1f086d6d60/install/centos/README.md #gitlab官方文档 https://help.aliyun.com/document_detail/52857.html #阿里云详细帮助文档 ##k8s http://jerrymin.blog.51cto.com/ http://www.what21.com/article/b_ldap_1486800615236.html #ldap http://wuyijun.cn/shi-yong-dockerfang-shi-an-zhuang-he-yun-xing-confluence/ #docker大神之confluence安装 http://debugo.com/docker-compose/ #docker-compose学习 http://www.cnblogs.com/luotianshuai/articles/5390253.html #svn备份（python脚本） http://blog.csdn.net/yeasy #docker大神杨保华 https://allengaller.github.io/docker/docker-dockerfile-detail/ #docker大神曹亚伦 http://blog.ihipop.info/?p=2393 #openvpn断线重连 http://blog.csdn.net/reblue520/article/details/51804162 #ldap相关 http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html #linux命令精讲 http://blog.csdn.net/azhao_dn/article/details/7073931 #rsync同步出错 http://jerry12356.blog.51cto.com/4308715/1854893 #openvpn+ldap http://blog.csdn.net/abc_email/article/details/49641575 #svn创建分支并merge http://suzf.net/ #日志收集 http://www.cnblogs.com/huang0925/p/3254243.html #svn创建分支 http://blog.lifeibo.com/ #淘宝团队 http://www.cnblogs.com/qiyeboy #七夜boy，安全+django https://www.leavesongs.com/ #安全圈大牛 http://www.opscoder.info/tag/django/ #django牛人 https://www.the5fire.com/ #djago牛人 https://github.com/thstack/ashinamo #python+django监控 https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow #git-overflow http://www.jianshu.com/p/bba6dc8c9783 #git-flow工作流程 https://github.com/triaquae #alex_github https://edu.hellobi.com/course/explore?c2=41 #网上学习资源 http://www.jianshu.com/p/39d7000dfa47 #关于主机名的一篇好文档 http://blog.csdn.net/wangpengqi/article/details/17139323 #类似于ldap的内网认证服务器搭建(radius) http://deshui.wang/ #.net开发大牛 http://www.ruanyifeng.com/blog/2015/08/git-use-process.html #阮一峰git的工作规范 http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Seven/Home/Catalog/201309/797634_97665_0.htm #radius认证交互过程 http://750126.blog.51cto.com/416440/101221 #openldap+radius ---恢复内容结束--- http://jaminzhang.github.io/ http://blog.csdn.net/dog250/article/details/6990814 #openvpn深入了解 https://github.com/MOxFIVE/hexo-theme-yelee #hexo双栏博客 http://9inet.cn/ #新的资源 https://liangxiansen.github.io/ #大神置顶 https://github.com/ansible/ansible #ansible源码 http://www.codexiu.cn/python/blog/36230/ #多进程使用paramiko http://www.cnblogs.com/wupeiqi/articles/4906230.html #python大牛 http://467754239.blog.51cto.com/4878013/1619166 #简易CMDB http://www.kancloud.cn/jfedu/python #京峰python分享 http://world77.blog.51cto.com/414605/707081/ #paramiko上传文件 http://467754239.blog.51cto.com/4878013/1619323 #paramiko分发多个文件博客处 https://github.com/roncoo/roncoo-cmdb #开源cmdb https://github.com/xiaoluoge11/lmanager/tree/master/CMDB #开源CMDB https://github.com/shengxinjing/woniu-cmdb #cmdb https://github.com/unixhot #赵班长github https://github.com/shengxinjing/my_blog/issues #蜗牛cmdb博客 http://blog.51reboot.com/ #reboot python博客 http://smilejay.com/2013/03/python3-mysql-connector/#kvm连载 https://zhuanlan.zhihu.com/p/20385707 #flask_monitor https://github.com/shengxinjing/my_blog/issues #python博客 https://zhuanlan.zhihu.com/p/20385707 #知乎前360大牛 http://123.56.29.218:8000/home #思远博客 http://docs.jinkan.org/docs/flask/index.html #flask3中文文档 http://apistore.baidu.com/astore/serviceinfo/1866.html http://www.cnblogs.com/MikeZhang/p/pythonDeamon_20150307.html #大神博客 http://llzdwyp.blog.51cto.com/6140981/1761057 #老男孩学生 https://github.com/jijianming/cmdb #同期学友cmdb http://bawang.zwhset.com #jf产品 http://www.cnblogs.com/voidsky #爬虫 http://www.jianshu.com/users/30f737ee0051/latest_articles #有趣的简书朋友 http://www.cnblogs.com/feixuelove1009/p/5660126.html #IO多路复用 http://www.rowkey.me/blog/2015/09/09/load-analysis/ #大牛，后端技术杂谈 http://www.rowkey.me/ #后端技术杂谈 http://coolshell.cn/articles/17416.html #coolhell大神陈浩博客 https://github.com/pzxwhc #微服务大神 http://www.rowkey.me/blog/2014/09/24/nginx-bootstrap/ #nginx源码启动过程 http://srhang.iteye.com/ #老博客 http://www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/ #互联网后端基础设施 http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651745239&amp;idx=1&amp;sn=60490558770ade79fd9f1e88f9c7c0ac&amp;scene=1&amp;srcid=0617o5PapWXlKUP4OxSzA7KE#rd #美团点评技术团队 http://www.cnblogs.com/hsydj/p/5303050.html #有赞大神博客之搜索引擎 http://git.oschina.net/qiangzigege/MySQL-Binlog #mysql-binlog源码 http://www.jianshu.com/users/f0e995b95f0e/latest_articles #网站开发大神 http://www.rowkey.me/blog/2016/11/02/java-profile/ #java调优 https://github.com/triaquae/PerfectCRM #alex作品 http://fishcried.com/2016-02-19/iptables/ #防火墙相关 http://www.cnblogs.com/liu-yao/ #刘耀博客 http://www.ibm.com/developerworks/cn/aix/library/0910_jiangpeng_unixdisk/ #IBM对磁盘IO的思想 http://www.linuxea.com/949.html #salt-key有关 http://www.roddypy.com/ #普拉多VS，灰度发布 http://youngfor.me/post/tech/saltshi-fen-zhong-ru-men #salt十分钟系列 https://cloud.baidu.com/doc/RDS/Resources/29.5C.E6.95.B0.E6.8D.AE.E6.BA.90.E4.B8.BAMySQL.html #百度云数据库导入导出步骤 https://github.com/netkiller/logging #操作日志github https://mmonit.com/monit/ #文件监控利器 http://www.mobile-open.com/2016/979087.html #移动端开发 http://www.python888.com/cx/186.html #同期python学员陈鑫 http://sparkdata.org/?p=271 #京东保障部博客 http://www.xianlaigame.com/ #闲来互娱官网 http://www.infocool.net/ #各种杂货铺 http://jaminzhang.github.io/categories/#SaltStack #saltstack相关 http://www.cnblogs.com/taosim/articles/3760812.html #saltstack各种模块 http://www.echojb.com/perl-python/2016/11/18/262156.html #python发工资脚本 http://www.cnblogs.com/lhj588/archive/2012/01/06/2314181.html #读取excel模块 http://www.cnblogs.com/deartear/ #python发工资脚本 https://github.com/biezhi?tab=stars #大神java_github http://ouyangyewei.me/ #shell大神 http://www.cnblogs.com/xiaoshi1991/archive/2012/09/20/2695645.html #发邮件之内 https://github.com/rfyiamcool #大神峰云github https://note.gitcloud.cc/blog/bluetom520 #群友博客，zabbix报警相关 http://www.voidcn.com/blog/wulex/article/p-6205416.html #python中orm模块写的很清楚和简洁 http://www.yanjunhui.com/ #运维总监闫军辉 http://hexo.lanzhishi.org/ #懒执事博客 http://www.cnblogs.com/wintersun/p/3930900.html #gitlab相关 https://jirry.me/2016/04/19/dnsmasq-on-aliyun/ #阿里云内网DNS搭建 https://www.softwarecollections.org #软件大全所在处 http://www.52devops.com/ #马亮大神 http://www.abcdocker.com/ #18岁后生，后生可畏 http://www.fblinux.com/?p=40 #elkstack https://www.gitbook.com/book/colinleefish/openstack-end-user-guide-simplified-chinese/details #openstack详细文档 https://nginx.ren/ #python大神博客 https://blog.cunss.com #salt大牛相关 http://www.msits.com/ #右链 http://jaminzhang.github.io/ #赵班长高徒 http://blog.liuyao.me/ #liuyao博客 http://www.unionsmart.cn/ #三明治 http://lanzhishi.org/ @懒职事 https://github.com/iyaoyao #liuyao_gitlab http://www.cnblogs.com/linkenpark #openstack部署 http://www.bladewan.com/2017/02/09/killo_newton #容器部署openstack http://www.cnblogs.com/iwangzheng/ ##ssh-copy-id有关 ttps://www.zhangluya.com/ #运维经理博客 http://www.chenshake.com/ #九州云总裁 http://heylinux.com/ #helinux http://adam.younglogic.com/ #外国人博客 http://dbanotes.net #杭州冯大辉 http://way4ever.com/ #陈沙克大牛好友 http://jaseywang.me/ #陈沙克好友 http://www.z-dig.com/ #老男孩学生和陈沙克好友 http://tools.zhaishidan.cn/ #各种资料集合 http://zh.learnlayout.com/position.html #各种css属性 http://jquery.cuishifeng.cn/index.html #jquery官方网站 https://www.ibm.com/developerworks/cn/java/j-lo-apache-subversion/ #svn安全相关 http://stackoverflow.com/questions/19218445/tortoisesvn-checkout-failed-error-svn-e120106-ra-serf-the-server-sent-a-trunc #svn报http_response错误 https://teddysun.com/326.html #http开启压缩机制 https://github.com/brunowang #思远go博客github http://www.cnblogs.com/liaojiafa/ #廖家发博客 http://nginx.taohui.org.cn/ #陶辉大神博客 http://www.cnblogs.com/CloudMan6/ #openstack大神cloudman http://answ.me/post/comment-in-django-part-2/ #django多级评论 https://www.dannysite.com #django大神博客 http://www.21yunwei.com #老男孩架构班学生博客 http://www.cnblogs.com/sagech/ #maven相关 http://www.cnblogs.com/chenchao1990/p/5284237.html #wusir学生，关于django http://ywzhou.blog.51cto.com/ #django+saltstack http://renzhiyuan.blog.51cto.com/10433137/1898689 #任志远，记一次和总监的谈话 http://dl528888.blog.51cto.com/2382721/1902274 #防DDoS http://wangwei007.blog.51cto.com/ #京东资深DBA https://github.com/qitan/icomments #嵌套评论 https://github.com/qitan/SOMS https://github.com/binbin91/oms https://imaojia.com/blog/django/django-nested-comments-icomments/ http://qunee.com/ #html画机房图 http://www.aboutyun.com/thread-6747-1-1.html #openstack的一些库环境 http://forta.com/books/0672327120/ #mysql必知必会网址 https://testerhome.com/jobs #求职网站 http://www.cnblogs.com/sammyliu/ #openstack大牛 http://www.simapple.com/346.html #docker知识 https://github.com/tutumcloud #docker相关的各种东西 http://blog.thislinux.com/blog/24.html #svn容量规划+google动态命令 http://www.3mu.me/linux%e4%b8%8bsvn%e7%9a%84%e8%87%aa%e5%8a%a8%e5%a4%87%e4%bb%bd%e4%b8%8e%e8%bf%98%e5%8e%9f%ef%bc%88%e5%b8%a6shell%e8%84%9a%e6%9c%ac%ef%bc%89/ #svn备份脚本 http://blog.uedao.com/ #docker多容器部署lnmp架构 http://www.cnblogs.com/kevingrace/p/6114336.html ##gitlab修改邮箱有关 https://github.com/gitlabhq/gitlab-recipes/tree/master/install/centos #centos6.8源码安装gitlab http://www.cyysu.cn/2017/03/14/Gitlab%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/ #成功搭建gitlab博客 https://bbs.gitlab.com.cn/topic/41/%E4%BD%BF%E7%94%A8nginx%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D-%E4%BB%A3%E7%90%86gitlab/2 #gitlab中文社区 https://yxnt.github.io/2015/12/23/gitlab-install/ #gitlab参考博文 https://chenjiehua.me/linux/gitlab-server-follow-up.html #gitlab参考博文 https://my.oschina.net/u/1865865/blog/655803 #gitlab参考博文 https://karmalove.github.io/2017/03/10/centos6-set-up-gitlab/ #gilab工作流程 https://github.com/btfak/gitlab-recipes/blob/bffe5a60f063720053ea90973ade8e1f086d6d60/install/centos/README.md #gitlab官方文档 https://help.aliyun.com/document_detail/52857.html #阿里云详细帮助文档 ##k8s http://jerrymin.blog.51cto.com/ http://www.what21.com/article/b_ldap_1486800615236.html #ldap http://wuyijun.cn/shi-yong-dockerfang-shi-an-zhuang-he-yun-xing-confluence/ #docker大神之confluence安装 http://debugo.com/docker-compose/ #docker-compose学习 http://www.cnblogs.com/luotianshuai/articles/5390253.html #svn备份（python脚本） http://blog.csdn.net/yeasy #docker大神杨保华 https://allengaller.github.io/docker/docker-dockerfile-detail/ #docker大神曹亚伦 http://blog.ihipop.info/?p=2393 #openvpn断线重连 http://blog.csdn.net/reblue520/article/details/51804162 #ldap相关 http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html #linux命令精讲 http://blog.csdn.net/azhao_dn/article/details/7073931 #rsync同步出错 http://jerry12356.blog.51cto.com/4308715/1854893 #openvpn+ldap http://blog.csdn.net/abc_email/article/details/49641575 #svn创建分支并merge http://suzf.net/ #日志收集 http://www.cnblogs.com/huang0925/p/3254243.html #svn创建分支 http://blog.lifeibo.com/ #淘宝团队 http://www.cnblogs.com/qiyeboy #七夜boy，安全+django https://www.leavesongs.com/ #安全圈大牛 http://www.opscoder.info/tag/django/ #django牛人 https://www.the5fire.com/ #djago牛人 https://github.com/thstack/ashinamo #python+django监控 https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow #git-overflow http://www.jianshu.com/p/bba6dc8c9783 #git-flow工作流程 https://github.com/triaquae #alex_github https://edu.hellobi.com/course/explore?c2=41 #网上学习资源 http://www.jianshu.com/p/39d7000dfa47 #关于主机名的一篇好文档 http://blog.csdn.net/wangpengqi/article/details/17139323 #类似于ldap的内网认证服务器搭建(radius) http://deshui.wang/ #.net开发大牛 http://www.ruanyifeng.com/blog/2015/08/git-use-process.html #阮一峰git的工作规范 http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Seven/Home/Catalog/201309/797634_97665_0.htm #radius认证交互过程 http://750126.blog.51cto.com/416440/101221 #openldap+radius http://blog.chunnorris.cc/2013/12/freeradius-8021x-eap-md5.html #freeradius-eap-md5 http://freeradius.1045715.n5.nabble.com/EAP-MD5-with-LDAP-td2751904.html #freeradius-eap-md5 http://marc.info/?l=freeradius-users&amp;m=106947389435019&amp;w=2 #freeradius-eap-md5 https://forum.lowyat.net/topic/422976/all #freeradius-eap-md5 http://mageconfig.blogspot.jp/2014/11/configure-radius-with-ldap-for-network.html #freeradius-eap-md5 https://afoo.me/ #前淘宝架构师 https://github.com/zhangfisher #富文本大神 http://blog.csdn.net/wyb199026/article/category/6084497 #django站内搜索 http://www.cnblogs.com/fnng/p/3737964.html #软件测试大神虫师 http://wybblog.applinzi.com/blog/ #测试大神，django大神 https://blog.mynook.info/post/host-your-own-git-server-using-gogs #gogs搭建git server http://yshblog.com/blog/80 #富文本django大神 http://ixdba.blog.51cto.com/ #高俊峰大神 http://zerosre.com/ #hadoop大神 http://renzhiyuan.blog.51cto.com/ #java大神 http://www.25555579.com/ #防安生博客 https://help.aliyun.com/openSearchKnowledgeList.html?queryScope=all_all&amp;keyWords=gogs&amp;page=1 #阿里云帮助文档 http://www.cnblogs.com/yinzhengjie/tag/zabbix/ #老男孩学生zabbix http://www.cnblogs.com/kevingrace/p/6019707.html #jenkins、elk相关 http://www.cnblogs.com/znicy/p/5626040.html #django+celery http://11736068.blog.51cto.com/11726068/1880711 #apache和nginx禁止使用IP访问网站 http://www.discuz.net/forum.php?mod=viewthread&amp;tid=3676245 #discuz论坛登录慢 http://laoguang.blog.51cto.com/ #老广 http://www.jianshu.com/u/a004b422adae #爬虫系列 http://blog.tianfeiyu.com/ #田飞雨 http://www.ttlsa.com/nginx/use-nginx-proxy/ #nginx反向代理至内网机器 http://www.cnblogs.com/zhoujinyi/ #DBA大神 https://github.com/trentm #marddown原作者 http://www.cnblogs.com/shawnpoo/p/SVN-cang-ku-qian-yi-daoGit-de-wan-mei-jie-jue-ban-.html #svn迁移git https://www.zhsir.org/ #张sir http://www.jianshu.com/p/9d5eaa1a0696 #python实现的维基网站 http://git.oschina.net/getsai/mzSpider/tree/master/mztest #爬取麦子学院视频 http://demo.pythoner.com/itt2zh/index.html #tornado电子书 http://www.cnblogs.com/caseast/ #python调取ldap相关 http://www.cnblogs.com/springran/articles/4101222.html #django实现单点登录 http://www.yunweipai.com/archives/16543.html #运维派 http://www.51reboot.com/ #51reboot官网 http://www.tiejiang.org/ #铁匠linux网 https://yq.aliyun.com/articles/82696?spm=5176.100240.searchblog.32.C66IXm #使用django快速创建CMDB http://www.tuicool.com/articles/nMz6Vbe #源码搭建的gitlab备份相关 https://github.com/onecer #王龙声旁的大神 https://walle-web.io/ #瓦力上线部署 https://uublog.com #王龙声旁的大神 http://xsank.com/webssh/ #web连接linux的工具 http://www.cnblogs.com/AloneSword/p/4758814.html #ldap双主配置 http://www.cnblogs.com/liwenzhou #12期李文周 https://wrapbootstrap.com/theme/inspinia-responsive-admin-theme-WB0R5L90S #牛逼的前端 https://www.bbsmax.com/ #git相关 http://www.cnblogs.com/leefan/p/5430754.html #top命令详解 https://gitlab.com/gitlab-org/omnibus-gitlab/issues/231 #gitlab报exceeds memory limit错误相关博客 ~~完~~]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b+ ubuntu ls颜色设置]]></title>
    <url>%2F2018%2F12%2F18%2Fubuntu_ls_color%2F</url>
    <content type="text"><![CDATA[树莓派3b+ ubuntu 终端ls时颜色设置参考： https://blog.csdn.net/LL_zhuo/article/details/44221567完]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b+_vim颜色主题]]></title>
    <url>%2F2018%2F12%2F18%2Fvim-colors%2F</url>
    <content type="text"><![CDATA[vim主题颜色设置环境: 树莓派3b+ ubuntu vim8 uname -a Linux pi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l GNU/Linux vim --version VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 30 2017 18:21:38) Included patches: 1-197, 322, 377-378, 550, 703, 706-707 Modified by pkg-vim-maintainers@lists.alioth.debian.org Compiled by pkg-vim-maintainers@lists.alioth.debian.org ...1.查看vim配置文件先查看是否有用户配置文件 如果有： ls -ltr ~/.vimrc 如果没有： ls -ltr /etc/vim/vimrc.local 如果有： 修改此文件 如果没有： ls -ltr /etc/vim/vimrc 这个肯定应该有，修改这个文件2.查看当前vim自带的颜色主题：ls -tlr /usr/share/vim/vim{XX}/colors/,例如： ls -ltr /usr/share/vim/vim80/colors/ total 76 -rw-r--r-- 1 root root 1840 Oct 1 2017 zellner.vim -rw-r--r-- 1 root root 1629 Oct 1 2017 torte.vim -rw-r--r-- 1 root root 2445 Oct 1 2017 slate.vim -rw-r--r-- 1 root root 2720 Oct 1 2017 shine.vim -rw-r--r-- 1 root root 1393 Oct 1 2017 ron.vim -rw-r--r-- 1 root root 2904 Oct 1 2017 README.txt ...3.修改对应步骤1中的配置文件vim xxx.vimrc: color delek #在文件末尾加一行4.顺便开启语法高亮：syntax on完]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b+_AlphaBot2模块列表]]></title>
    <url>%2F2018%2F12%2F17%2Fpi3b-AlphaBot2%2F</url>
    <content type="text"><![CDATA[Arduino控制程序：Run-Test 电机测试 Joystick 程序 五向摇杆 IR 程序 红外遥控器控制 Infrared-Obstacle-Avoidancec 红外避障 Ultrasionc-Obstacle-Avoidance 超声波避障 Ultrasionc-Infrared-Obstacle-Avoidance 超声波红外避障 Ultrasionc_Ranging 超声波测距 TRSensors 寻迹传感器测试 Infrared-Line-Tracking 红外寻迹 W2812 RGB彩灯 OLED 绘图操作demo Line-Tracking 综合程序 MazeSolver 迷宫程序 Bluetooth 蓝牙控制 Bluetooth-json 蓝牙控制(json格式) 树莓派控制程序(AlphaBot2.tar.gz):wget http://www.waveshare.net/w/upload/e/ee/AlphaBot2-Demo.7z wget http://www.waveshare.net/w/upload/c/c3/Rpi_ws281x-master.zipgpiogit clone git://git.drogon.net/wiringPi cd wiringPi ./build gpio -v gpio readall红外遥控器控制cd ~/AlphaBot2/python python IRremote.py电机测试cd ~/AlphaBot2/python python AlphaBot2.py五向摇杆cd ~/AlphaBot2/python python Joystick.py红外避障cd ~/AlphaBot2/python python Infrared_Obstacle_Avoidance.py超声波测距（树莓派 3B 套餐不包含超声波模块）cd ~/AlphaBot2/python python Ultrasonic_Rangeing.py超声波测距（树莓派 3B 套餐不包含超声波模块）cd ~/AlphaBot2/python python Infrared_Obstacle_Avoidance.pyRGB 彩灯rpi_ws281x-master.zip unzip rpi_ws281x-master.zip apt-get install build-essential python-dev scons swig cd rpi_ws281x-master scons ./test cd python python setup.py install cd examples python lowlevel.py cd ~/AlphaBot2/python python ws2812.py循迹传感器测试cd ~/AlphaBot2/python python TRSensors.py红外循迹程序cd ~/AlphaBot2/python python LineFollow.py舵机cd ~/AlphaBot2/python python PCA9685.pymjpg-streamer 软件实时监控a,raspi-config 开启摄像头 b,/etc/modules 添加一行:bcm2835-v4l2 c,重启后,ls -ltr /dev/video0 (若无,rpi-update) cd AlphaBot2/lib/mjpg-streamer ./start http://ip:8080/通过 webiopi 实现远程遥控cd AlphaBot2/lib/WebIOPi-0.7.1-raspi2 ./setup.sh webiopi -h webiopi -d -c /etc/webiopi/config http://ip:8000 mjpg-AlphaBot 目录，修改视频源 IP: cd ./AlphaBot2/mjpg-AlphaBot/ vim index.html http://x.x.x.x:8080/?action=stream cd ./AlphaBot2/mjpg-AlphaBot webiopi -c config http://x.x.x.x:8000/ ./AlphaBot2/mjpg-AlphaBot/mjpg-AlphaBot webiopi -c config 设置开机启动： cd ./AlphaBot2/mjpg-AlphaBot cp config /etc/webiopi/config update-rc.d webiopi defaults vim /etc/rc.local: cd /home/pi/AlphaBot2/lib/mjpg-streamer ./start.sh &amp;通过 Bottle 实现远程遥控a.apt-get install python-bottle b.cd ~/AlphaBot2/Web-RGB python main c. http://ip:8000 (手机端) d.cd ~/AlphaBot2/Web-Control vim index.html,修改真实ip: &lt;img width=&quot;320&quot; height=&quot;240&quot; src=&quot;http://192.168.10.235:8080/?action=stream&quot;&gt; e.python main f.http://ip:8000 g.开机启动： vim /etc/rc.local: cd /home/pi/AlphaBot2/lib/mjpg-streamer ./start.sh &amp; cd /home/pi/AlphaBot2/Web-Contrl python main &amp; h.vim /etc/dhcpcd.comf 设置静态 IP interface wlan0 static ip_address = 192.168.1.114/24 static routers = 192.168.1.1通过软件远程遥控小车a.cd ~/AlphaBot2/App-Control b.vim main.py: Host = &apos;192.168.10.235&apos; c.python main d.运行mjpg-streamer e.打开 AlphaBot.exe 程序，输入 IP 地址，mjpg-stream 的端口号，小车 Soket 服务端的端口号 f.开机启动, vim /etc/rc.local: cd /home/pi/AlphaBot/lib/mjpg-streamer ./start.sh &amp; cd /home/pi/AlphaBot/App-Contrl python main &amp; g.可开启树莓派无线网络适配器的AP功能(不用连接WIFI)通过树莓派蓝牙遥控小车a.升级蓝牙软件包 apt-get update apt-get upgrade -y apt-get dist-upgrade -y apt-get install pi-bluetooth bluez bluez-firmware blueman b.pi用户到蓝牙组 usermod –G Bluetooth –a pi c.reboot d.启动/增加 SPP，开启蓝牙设备: vim /etc/systemd/system/dbus-org.bluez.service ExecStart=/usr/lib/bluetooth/bluetoothd ExecStartPost=/usr/bin/sdptool add SP reboot e.hciconfig (如果/boot/config.txt 文件中有 dtoverlay=pi3-miniuart-bt 这语句需要注释掉) f.bluetoothctl agent on agent on default-agent pair XX:XX:XX:XX:XX:XX ( XX:XX:XX:XX:XX:XX 替换为你自己设备的地址) trust XX:XX:XX:XX:XX:XX (配对之后把设备添加到信任列表) connect XX:XX:XX:XX:XX:XX (注意：如果命令行下链接不成功可以在图形界面下连接。) g.cd /AlphaBot2/Bluetooth-Control rfcomm watch hci0 1 python bluetooth.py h.下载APP(只有安卓, page 45) https://fir.im/hysk i.bluetoothctl discoverable on quit]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b+_wifi-ap]]></title>
    <url>%2F2018%2F12%2F17%2Fpi3b-ap%2F</url>
    <content type="text"><![CDATA[树莓派设置wifi ap模式：参考： https://www.cnblogs.com/visionsl/p/8042315.html 或者 git clone https://github.com/oblique/create_ap.git cd create_ap/ make install apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq -y ifdown wlan0 create_ap wlan0 eth0 | create_ap --no-virt wlan0 eth0 | create_ap --no-virt wlan0 eth0 ssidname password ~~完~~]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人网盘kiftd]]></title>
    <url>%2F2018%2F12%2F12%2F%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98kiftd%2F</url>
    <content type="text"><![CDATA[个人网盘kiftd完全开源个人网盘 kiftdNote个人网盘kiftd（jdk + jar） 官网：https://github.com/KOHGYLW/kiftd 文档：https://kohgylw.gitee.io/QuickStart.html下载wget https://github.com/KOHGYLW/kiftd/archive/master.zip安装cd /opt/apps/ unzip kiftd-master.zip配置java环境（略）java -version java version &quot;1.8.0_91&quot; Java(TM) SE Runtime Environment (build 1.8.0_91-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)配置端口1.配置iptables 2.配置云服务器安全组启动cd /opt/apps/kiftd java -jar kiftd-1.0.9-RELEASE.jar -console (命令行模式) java -jar kiftd-1.0.9-RELEASE.jar (界面模式)命令行模式命令-start 启动服务器 -stop 停止服务器 -exit 停止服务器并退出应用 -restart 重启服务器 -status 查看服务器状态杂项a.默认用户密码：admin/000000 b.账号配置文件和服务器配置文件都在 /opt/apps/kiftd/conf/下,第一次启动后才生成配置文件，默认是空 c.除了可以上传、下载、删除、创建目录外，可以在线查看图片、播放mp3文件、播放mp4视频、在线查看pdf等,doc/ppt/xls等无法在线编辑和查看 d.可以在配置文件中设置强制登陆，创建其他用户和组，以及设置其他用户和组的权限(参考解压包后的：kiftd说明文档.pdf) e.目录结构： ├── conf #配置目录 │ ├── account.properties #账户配置 │ └── server.properties #服务器配置 ├── filesystem #文件存储目录 │ ├── fileblocks │ │ └── file_96e1f49315c547c285212025512cab1b.block │ ├── filenodes │ │ └── kift.mv.db │ └── temporaryfiles ├── kiftd-1.0.9-RELEASE.jar #服务jar包 ├── kiftd说明文档.pdf ├── logs #日志目录 │ └── 2018_12_11.klog ├── mybatisResource │ ├── mapperXML │ │ ├── FolderMapper.xml │ │ └── NodeMapper.xml │ └── mybatis.xml ├── README.md ├── webContext └───使用许可]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kiftd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[aliyun的centos下的iptables防探测]]></title>
    <url>%2F2018%2F12%2F06%2Faliyun-centos-iptables%2F</url>
    <content type="text"><![CDATA[参考：https://blog.csdn.net/orange596/article/details/78668808停止和关闭firewalldsystemctl stop firewalld.service systemctl disable firewalld.service安装iptables:yum install iptables-services配置iptables:vim /etc/sysconfig/iptables: # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT DROP [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -p tcp --dport 80 -m string --algo bm --string &quot;php&quot; -j DROP -A INPUT -p tcp --dport 80 -m string --algo bm --string &quot;java&quot; -j DROP -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 22022 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 22500 -j ACCEPT -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT -A INPUT -p tcp -m tcp --dport 5443 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT重启iptables:systemctl restart iptables.service systemctl enable iptables.service禁用selinux：vim /etc/selinux/config: SELINUX=disabled #立刻生效配置 setenforce 0]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell免秘钥操作github]]></title>
    <url>%2F2018%2F12%2F06%2Fshell%E5%85%8D%E7%A7%98%E9%92%A5%E6%93%8D%E4%BD%9Cgithub%2F</url>
    <content type="text"><![CDATA[生成密钥对：ssh-keygen上传公钥到github:点击用户图标 -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; 编辑 title,无要求， 编辑 ssh key，粘贴公钥 -&gt; add ssh keyssh 操作 仓库：cd xxxx git clone git@github.com:username/test.git cd test .... modify files .... git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot; git add . git commit -m &quot;test&quot; git push—-完—-]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab的restFul Api]]></title>
    <url>%2F2018%2F12%2F04%2Fgitlab-restFul%2F</url>
    <content type="text"><![CDATA[gitlab官方文档pip install python-gitlab 参考： https://docs.gitlab.com/ce/api/README.htmlimportimport gitlabconfig paramurl = &apos;http://xxxxxxx&apos; token = &apos;xxxxxxxxxxxxxx&apos;登录gl = gitlab.Gitlab(url, token)获取第一页projectprojects = gl.projects.list()获取所有的projectprojects = gl.projects.list(all=True)获取所有project的name,idfor p in gl.projects.list(all=True, as_list=False): print(p.name, p.id)获取某个id的project下的某个文件的内容：api: https://docs.gitlab.com/ce/api/repository_files.html#get-file-from-repository example: GET /projects/:id/repository/files/:file_path curl --request GET --header &apos;PRIVATE-TOKEN: 9koXpg98eAheJpvBs5tK&apos; &apos;https://gitlab.example.com/api/v4/projects/13083/repository/files/app%2Fmodels%2Fkey%2Erb?ref=master&apos; 参考： https://blog.csdn.net/felix_yujing/article/details/5271292512345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; import gitlab&gt;&gt;&gt; private_token = 'xxx'&gt;&gt;&gt; host = 'https://git.xxx.yyy.com'&gt;&gt;&gt; port = '443'&gt;&gt;&gt; email = 'admin@example.com'&gt;&gt;&gt; branch = 'master'&gt;&gt;&gt; timeout = 60&gt;&gt;&gt; project_name = 'camera'&gt;&gt;&gt; file_path = '/execenv/execenv.yml'&gt;&gt;&gt; client = gitlab.Gitlab('&#123;0&#125;:&#123;1&#125;'.format(host, port), email, private_token, timeout)&gt;&gt;&gt; project_objects = client.projects.list(search = project_name)&gt;&gt;&gt; project_id = None&gt;&gt;&gt; for item in project_objects:... if item.name == project_name:... project_id = item.id... else:... continue&gt;&gt;&gt; project_id64&gt;&gt;&gt; url = '&#123;0&#125;:&#123;1&#125;/api/v4/projects/&#123;2&#125;/repository/files?private_token=&#123;3&#125;&amp;file_path=&#123;4&#125;&amp;ref=&#123;5&#125;'.format(host, port, project_id, private_token, file_path, branch)&gt;&gt;&gt; result = requests.get(url)&gt;&gt;&gt; data = result.json()&gt;&gt;&gt; content = base64.b64decode(data['content'])&gt;&gt;&gt; print content---os: linuxversion: 1.0appService: cameraexec: - type: java version: 1.8 verify: java -version 更新某个id的project下的某个文件内容：api: https://docs.gitlab.com/ce/api/repository_files.html#update-existing-file-in-repository example: PUT /projects/:id/repository/files/:file_path curl --request PUT --header &apos;PRIVATE-TOKEN: 9koXpg98eAheJpvBs5tK&apos; --header &quot;Content-Type: application/json&quot; \ --data &apos;{&quot;branch&quot;: &quot;master&quot;, &quot;author_email&quot;: &quot;author@example.com&quot;, &quot;author_name&quot;: &quot;Firstname Lastname&quot;, \ &quot;content&quot;: &quot;some content&quot;, &quot;commit_message&quot;: &quot;update file&quot;}&apos; \ &apos;https://gitlab.example.com/api/v4/projects/13083/repository/files/app%2Fproject%2Erb&apos; response: { &quot;file_path&quot;: &quot;app/project.rb&quot;, &quot;branch&quot;: &quot;master&quot; }获取第一页project的name,idfor p in gl.projects.list(page=1): print(p.name, p.id)通过指定id 获取 project 对象project = gl.projects.get(501)查找项目projects = gl.projects.list(search=&apos;keyword&apos;)创建一个项目project = gl.projects.create({&apos;name&apos;:&apos;project1&apos;})获取公开的项目projects = gl.projects.list(visibility=&apos;public&apos;) # public, internal or private获取 project 对象是以下操作的基础通过指定project对象获取该项目的所有分支branches = project.branches.list() print(branches)获取指定分支的属性branch = project.branches.get(&apos;master&apos;) print(branch)创建分支branch = project.branches.create({&apos;branch_name&apos;: &apos;feature1&apos;, &apos;ref&apos;: &apos;master&apos;})删除分支project.branches.delete(&apos;feature1&apos;)获取指定项目的所有tagstags = project.tags.list()获取某个指定tag 的信息tags = project.tags.list(&apos;1.0&apos;)创建一个tagtag = project.tags.create({&apos;tag_name&apos;:&apos;1.0&apos;, &apos;ref&apos;:&apos;master&apos;})设置tags 说明:tag.set_release_description(&apos;awesome v1.0 release&apos;)删除tagsproject.tags.delete(&apos;1.0&apos;) or tag.delete()获取所有commit infocommits = project.commits.list() for c in commits: print(c.author_name, c.message, c.title)获取指定commit的infocommit = project.commits.get(&apos;e3d5a71b&apos;)创建一个commitdata = { &apos;branch_name&apos;: &apos;master&apos;, # v3 &apos;commit_message&apos;: &apos;blah blah blah&apos;, &apos;actions&apos;: [ { &apos;action&apos;: &apos;create&apos;, &apos;file_path&apos;: &apos;blah&apos;, &apos;content&apos;: &apos;blah&apos; } ] } commit = project.commits.create(data)Compare two branches, tags or commits:result = project.repository_compare(&apos;develop&apos;, &apos;feature-20180104&apos;) print(result)get the commitsfor commit in result[&apos;commits&apos;]: print(commit)get the diffsfor file_diff in result[&apos;diffs&apos;]: print(file_diff)get the commitsfor commit in result[&apos;commits&apos;]: print(commit)get the diffsfor file_diff in result[&apos;diffs&apos;]: print(file_diff)groups/project members’s api参考： https://docs.gitlab.com/ce/api/members.html待续]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins的restFul Api]]></title>
    <url>%2F2018%2F12%2F04%2Fjenkink-restFul%2F</url>
    <content type="text"><![CDATA[安装pip install python-jenkins doc参考： https://python-jenkins.readthedocs.io/en/latest/api.htmlimport&gt;&gt;&gt; import jenkinsconnect&gt;&gt;&gt; jk = jenkins.Jenkins(url = &apos;http://platform.xxxx.xxxx.com:9090&apos;, username=&apos;root&apos;, password=&apos;********&apos;, timeout = 60)get jenkins version&gt;&gt;&gt; version = jk.get_version()get job config.xml&gt;&gt;&gt; admin_config = jk.get_job_config(&apos;admin-server&apos;)modify job config.xml...modify job from config.xml&gt;&gt;&gt; ret = jk.reconfig_job(&apos;admin-server&apos;, admin_config)create job from config.xml&gt;&gt;&gt; admin_2 = jk.create_job(&apos;admin-server-copy&apos;, admin_config)delete job&gt;&gt;&gt; ret = jk.delete_job(&apos;admin-server-copy&apos;)check job is exist&gt;&gt;&gt; ret = jk.job_exists(&apos;admin-server-copy&apos;) &gt;&gt;&gt; print ret None &gt;&gt;&gt; ret = jk.job_exists(&apos;admin-server&apos;) &gt;&gt;&gt; ret Trueget next build number&gt;&gt;&gt; next_build_number = jk.get_job_info(&apos;admin-server&apos;)[&apos;nextBuildNumber&apos;]build job&gt;&gt;&gt; output = server.build_job(&apos;admin-server&apos;)get job build info&gt;&gt;&gt; from time import sleep; sleep(10) &gt;&gt;&gt; build_info = jk.get_build_info(&apos;admin-server&apos;, next_build_number) &gt;&gt;&gt; print(build_info)get job build console info&gt;&gt;&gt; build_info = jk.get_build_console_output(&apos;admin-server&apos;, 105)待续]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b+_gitblog]]></title>
    <url>%2F2018%2F11%2F30%2Finstall-gitblog%2F</url>
    <content type="text"><![CDATA[软硬件配置：硬件：树莓派3B+ 系统：2018-11-13-raspbian-stretch.zip（1.0G） gitblog:https://github.com/jockchou/gitblog https://github.com/jockchou/gitblog/releases软件安装apt-get install php Failed to start The Apache HTTP Server.(与nginx默认端口80冲突，后续修改) apt-get install php-mysql apt-get install php-fpm apt-get install php-mbstring 注意：不要参考网络教程安装什么php5,会报错，换源也没用，原因是新系统里的源里只有php7,没有php5软件配置vim /etc/apache2/ports.conf Listen 8080 Listen 1443 /etc/init.d/apache2 restart安装部署root@pi:/var/www# mkdir -p blog root@pi:/var/www# cd blog root@pi:/var/www# wget https://github.com/jockchou/gitblog/archive/v2.3.2.tar.gz root@pi:/var/www# tar zxvf v2.3.2.tar.gz root@pi:/var/www/blog# ll total 2892 -rw-r--r-- 1 root root 2957011 Nov 30 13:50 v2.3.2.tar.gz drwxrwxr-x 6 root root 4096 Nov 30 14:50 gitblog-2.3.2 root@pi:/var/www/blog# cd gitblog-2.3.2/ root@pi:/var/www/blog/gitblog-2.3.2# ll total 836 drwxrwxr-x 7 root root 4096 Apr 12 2017 sys -rw-rw-r-- 1 root root 775989 Apr 12 2017 screenshot.png -rw-rw-r-- 1 root root 74 Apr 12 2017 robots.txt -rw-rw-r-- 1 root root 4301 Apr 12 2017 README.md -rw-rw-r-- 1 root root 1936 Apr 12 2017 logo.png -rw-rw-r-- 1 root root 11358 Apr 12 2017 LICENSE -rw-rw-r-- 1 root root 9793 Apr 12 2017 index.php -rw-rw-r-- 1 root root 1099 Apr 12 2017 history.txt -rw-rw-r-- 1 root root 4286 Apr 12 2017 favicon.ico -rw-rw-r-- 1 root root 2144 Apr 12 2017 example-conf.yaml drwxrwxr-x 14 root root 4096 Apr 12 2017 app drwxrwxr-x 8 root root 4096 Nov 30 14:23 theme drwxrwxr-x 3 root root 4096 Nov 30 14:24 blog -rw-rw-r-- 1 root root 648 Nov 30 14:50 conf.yaml root@pi:/var/www# ll total 12 drwxr-xr-x 2 root root 4096 Nov 30 12:26 html -rw-r--r-- 1 root root 19 Nov 30 13:47 index.php drwxr-xr-x 3 root root 4096 Nov 30 13:51 blog root@pi:/var/www# cat index.php &lt;?php phpinfo();?&gt;502错误（root为运行用户,参考官方）cd /var/www/blog/gitblog-2.3.2 chown -R root:root ./app/cache chown -R root:root ./app/logs其他配置vim /etc/php/7.0/apache2/php.ini short_open_tag = On重启服务/etc/init.d/apache2 restart /etc/init.d/nginx restart]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab备份与恢复]]></title>
    <url>%2F2018%2F10%2F14%2Fgitlab-backup%2F</url>
    <content type="text"><![CDATA[备份参考：https://www.cnblogs.com/kevingrace/p/7821529.html备份与恢复参考：https://blog.csdn.net/jenyzhang/article/details/53928438备份：gitlab-rake gitlab:backup:create (默认备份文件储存在 /var/opt/gitlab/backups/140623891_gitlab_backup.tar)恢复：cp 140623891_gitlab_backup.tar /var/opt/gitlab/backups/ gitlab-ctl stop unicorn gitlab-ctl stop sidekiq gitlab-rake gitlab:backup:restore BACKUP=140623891 -- 备份文件名的时间戳前缀 gitlab-ctl start gitlab-rake gitlab:check SANITIZE=true设置定时备份0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1设置备份保存七天/etc/gitlab/gitlab.rb gitlab_rails[&apos;backup_keep_time&apos;] = 604800重新加载gitlab配置文件sudo gitlab-ctl reconfigure]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下文件监控aide]]></title>
    <url>%2F2017%2F12%2F06%2Flinux-aide%2F</url>
    <content type="text"><![CDATA[参考：https://www.jianshu.com/p/0e1e85808752安装:yum install aide aide -h配置：vim /etc/aide.conf #监控 /app 目录 /app mon #排出 /app/f3 文件 !/app/f3数据初始化：aide -i ls -ltrh /var/lib/aide/aide.db.new.gz文件扫描：aide -C扫描结果更新到数据文件：aide -u cp -ar /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz—-完—-]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ec2挂载s3fs]]></title>
    <url>%2F2017%2F11%2F30%2Fec2-s3fs%2F</url>
    <content type="text"><![CDATA[官网：https://github.com/s3fs-fuse/s3fs-fuse0.IAM key,idecho ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ~/.passwd-s3fs chmod 600 ~/.passwd-s3fs1./etc/fstab 自动挂载/etc/fstab: devops.zhangyh-test /data_s3/packages/ fuse.s3fs _netdev,allow_other 0 0 or s3fs#devops.zhangyh-test /data_s3/packages/ fuse _netdev,allow_other,use_path_request_style,url=http://url.to.s3/,endpoint=cn-north-1 0 02.手动挂载cn: s3fs -o allow_other devops.zhangyh-test /data_s3/packages/ -o passwd_file=~/.passwd-s3fs -o url=http://s3.&lt;region-name&gt;.amazonaws.com.cn -o endpoint=&lt;region-name&gt; //直接挂载,日志在/var/log/messages s3fs -o allow_other devops.zhangyh-test /data_s3/packages/ -o passwd_file=~/.passwd-s3fs -o url=http://s3.&lt;region-name&gt;.amazonaws.com.cn -o endpoint=&lt;region-name&gt; -o dbglevel=info -f -o curldbg //带debug日志输出 us: ......3.查看df -h Filesystem Size Used Avail Use% Mounted on /dev/xvda1 7.2G 3.8G 3.1G 56% / devtmpfs 3.6G 0 3.6G 0% /dev tmpfs 3.5G 0 3.5G 0% /dev/shm tmpfs 3.5G 338M 3.2G 10% /run tmpfs 3.5G 0 3.5G 0% /sys/fs/cgroup /dev/xvdb1 7.8G 134M 7.3G 2% /var/log /dev/mapper/VG--SD-LV--SD 1.1T 66G 985G 7% /data tmpfs 707M 0 707M 0% /run/user/1002 s3fs 256T 0 256T 0% /data_s3/packages取消挂载umount /data_s3/packages参考：https://github.com/s3fs-fuse/s3fs-fuse/wiki/FAQ#q-https-connecting-failed-if-bucket-name-includes-dot- //官方FAQ https://aws.amazon.com/cn/blogs/china/s3fs-amazon-ec2-linux/ https://mp.weixin.qq.com/s/F2YMedm8q2M40MPzwSa9YQ特点利用S3fs可以方便的把S3存储桶挂载在用户本地操作系统目录中，但是由于S3fs实际上是依托于Amazon S3服务提供的目录访问接口，所以不能简单的把S3fs挂载的目录和本地操作系统目录等同使用。用户使用S3f3挂载S3存储桶和直接访问S3服务有类似的使用场景。适用于对不同大小文件对象的一次保存（上传），多次读取（下载）。不适用于对已保存文件经常做随机修改，因为每次在本地修改并保存文件内容都会导致S3fs上传新的文件到Amazon S3去替换原来的文件。从访问性能上来说，通过操作系统目录方式间接访问Amazon S3存储服务的性能不如直接使用SDK或CLI接口访问效率高。以本地配置文件方式保存访问密钥的安全性也不如使用EC2 IAM角色方式高。 通常S3不能提供与本地文件系统相同的性能或语义。进一步来说： · 随机写入或追加到文件需要重写整个文件 · 元数据操作比如列出目录会因为网络延迟原因导致性能较差 · 最终一致性设计可能临时导致过期数据 · 没有对文件或目录的原子重命名功能 · 挂载相同存储桶的多个客户端之间没有相互协调机制 · 不支持硬链接总结利用S3fs可以把共享的Amazon S3存储桶直接挂载在用户服务器本地目录下，应用不需要做修改就可以直接使用Amazon S3存储服务，这种方式可以作为临时解决方案将传统应用快速迁移到AWS平台。 在已经提供了Amazon EFS（Elastic File System）服务的AWS区域，建议用户优先考虑使用Amazon EFS服务，因为它具有更高的性能。在目前还没有提供EFS服务的AWS区域，用户可以先暂时使用S3fs实现快速业务迁移。然后逐步调整S3数据访问实现方式，最终修改为使用AWS SDK或CLI方式高效并更加安全地访问S3存储服务。~ the end ~]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab采坑记]]></title>
    <url>%2F2017%2F09%2F24%2Fgitlab-debug%2F</url>
    <content type="text"><![CDATA[rpm指定版本包下载：http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/ https://packages.gitlab.com/gitlab/gitlab-ce //官方，比较慢rpm版本包下载：wget http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/gitlab-ce-8.17.3-ce.0.el7.x86_64.rpm wget http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/gitlab-ce-9.5.10-ce.0.el7.x86_64.rpm wget http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm wget http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.3.6-ce.0.el7.x86_64.rpm //latestrpm包安装：rpm -ivh gitlab-ce-8.17.3-ce.0.el7.x86_64.rpmrpm包卸载：rpm -e gitlab-ce or yum erase gitlab-cegitlab重要参数：external_url &apos;http://10.100.102.207:8888&apos; gitlab_rails[&apos;backup_path&apos;] = &quot;/data1/backup/git_back/source&quot; git_data_dirs({&quot;default&quot; =&gt; &quot;/data1/gitlab-data&quot;}) nginx port uniorn portgitlab版本升级：wget http://mirrors.zju.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.3.6-ce.0.el7.x86_64.rpm (latest) rpm -Uvh gitlab-ce-10.0.4-ce.0.el7.x86_64.rpm 注意： 官方升级策略: 8.13.4 -&gt; 8.17.7 -&gt; 9.5.10 -&gt; 10.8.7 -&gt; 11.3.4 https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations 升级后500错误 和 &quot;no implicit conversion of nil into String&quot;: https://gitlab.com/gitlab-org/omnibus-gitlab/issues/3189 vim /etc/gitlab/gitlab.rb # git_data_dirs({&quot;default&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot;}) ----&gt; git_data_dir({&quot;default&quot; =&gt; { &quot;path&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot; } })gitlab汉化：1.yum install -y git 2.mkdir /opt/gitlab_cn git clone https://gitlab.com/xhang/gitlab.git or git clone https://gitlab.com/xhang/gitlab.git -b v10.0.2-zh //指定v10.2.2的版本 3.cat gitlab/VERSION 4.gitlab-ctl stop 5.cd /opt/gitlab_cn git diff v10.0.4 v10.0.4-zh &gt; ../10.0.4-zh.diff 6.cd /opt/gitlab_cn yum install patch -y patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; 10.0.4-zh.diff 7.gitlab-ctl start gitlab-ctl reconfiguregitlab 启用https:vim /etc/gitlab/gitlab.rb external_url &quot;https://git.xxxx.com&quot; nginx[&apos;redirect_http_to_https&apos;]=true nginx[&apos;ssl_certificate&apos;]=&quot;/var/xxxx.crt&quot; nginx[&apos;ssl_certificate_key&apos;]=&quot;/var/xxxx.key&quot; gitlab-ctl reconfiguregitlab-ctl reconfigure 假死，解决方法：ctrl + C systemctl restart gitlab-runsvdir gitlab-ctl reconfigure 参考--https://gitlab.com/gitlab-org/omnibus-gitlab/issues/160启动后502错误：配置中 nginx 和 unicorn 的端口冲突导致(nginx默认为80，unicorn默认为8080) 1、权限问题:chmod -R 755 /var/log/gitlab 2、Gitlab的默认启动端口是80,8080 external_url &apos;http://localhost:8888&apos; #指定访问端口，默认是80 unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos; unicorn[&apos;port&apos;] = 8001 # 为unicorn worker的工作端口，默认为8080，如果你的8080端口被占用的，这一项需要更改。 3、内存不足的问题 安装gitlab的时候，已经说明你的空余内存需要有4G左右的内存，所以在安装gitlab的时候，请给足内存，在安装。 注：参考 http://www.mamicode.com/info-detail-2317465.html恢复：gitlab-ctl stop unicorn gitlab-ctl stop sidekiq gitlab-rake gitlab:backup:restore BACKUP=1538267907_2018_09_30 注意：gitlab_rails[&apos;backup_path&apos;]下有 1538267907_2018_09_30_gitlab_backup.tar 文件。 恢复后记得删除 git_data_dirs 下的的 repositories.old.xxxx目录，恢复一次就生成一次以前的备份，空间很大无提示恢复(无效果)：gitlab-rake gitlab:backup:restore BACKUP=1538267907_2018_09_30 -s恢复备份时的权限错误：可以用:gitlab-rake gitlab:check检查 A.一般是配置gitlab_rails[&apos;backup_path&apos;] = &quot;/data1/backups&quot;(/var/opt/gitlab/backups 为默认值)，此处的目录中的第一级目录必须修改权限为git用户(chown -R git /data1/) B.仓库的目录也必须是git用户的,查看配置中的git_data_dirs值: chown -R git:git /data1/gitlab-data/repositories恢复时备份文件不存在错误：备份文件名中除了后半部分 _gitlab_backup.tar 其他的全是输入的时间戳 -rwx------ 1 git root 9108725760 Oct 8 15:49 1538267907_2018_09_30_gitlab_backup.tar [root@ima_sengled source]# gitlab-rake gitlab:backup:restore BACKUP=1538267907_2018_09_30 ...重装清理操作gitlab-ctl stop gitlab-ctl uninstall yum erase gitlab-ce ps -ef|grep gitlab-ctl|awk &apos;{print $2}&apos;|kill -9 find / -name gitlab ----&gt; 清除缓存和临时文件 /etc/gitlab/gitlab.rp 的 git_data_dirs 下清空 rm -rf /etc/gitlab/gitlab.rb注意：恢复后，用户和组全部恢复到备份中的内容。 恢复后，无法恢复用户的图像信息。 ~完~]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python sdk 操作aliyun的ecs]]></title>
    <url>%2F2016%2F12%2F27%2Faliyun-ecs-python-example%2F</url>
    <content type="text"><![CDATA[python sdk方式操作aliyun ECS:pip install aliyun-python-sdk-core pip install aliyun-python-sdk-ecs 参考： https://develop.aliyun.com/tools/sdk?#/pythonaliyun SDK:SDK: https://github.com/aliyun/aliyun-openapi-python-sdk use example: https://github.com/aliyun/aliyun-openapi-python-sdk#use-python-sdk python demo:12345678910111213141516171819from aliyunsdkcore import clientAccessKeyID="access_key_id"AccessKeySecret="access_key_secret"RegionId="region_id"clt = client.AcsClient(AccessKeyID,AccessKeySecret,RegionId)import aliyunsdkecshelp(aliyunsdkecs) #ls -ltr /usr/lib/python2.7/site-packages/aliyunsdkecs/request/v20140526/from aliyunsdkecs.request.v20140526 import DescribeInstancesRequestDescribeInstancesReq = aliyunsdkecs.request.v20140526.DescribeInstancesRequest.DescribeInstancesRequest()DescribeInstancesReq.get_InstanceIds()DescribeInstancesReq.set_ImageId(ImageId = 'xxxx')DescribeInstancesReq.set_InstanceName(InstanceName = 'yyyy')ret = json.loads(clt.do_action_with_exception(DescribeInstancesReq))print ret 完]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell-yaml的使用]]></title>
    <url>%2F2016%2F11%2F30%2Fshell-yaml%2F</url>
    <content type="text"><![CDATA[shyaml：安装： pip install shyaml 参考： https://github.com/0k/shyaml.gitexample:------------------------------分割线------------------------------ [root@10 src]# cat buildspec.yml version: 0.1 phases: install: commands: - echo &quot;Nothing to do in the install phase...&quot; pre_build: commands: - echo &quot;Make begin with [`date`], ok. &quot; - yum -y install zlib-devel build: commands: - echo &quot;Build begin with [`date`]&quot; - sh build-cproject.sh - mvn install post_build: commands: - echo &quot;Build complete with [`date`]&quot; artifacts: files: - source: src/java/distribution.zip destination: content/ action: unzip ------------------------------分割线------------------------------ [root@10 src]# cat buildspec.yml |shyaml get-value version 0.1[root@10 src]# [root@10 src]# cat buildspec.yml |shyaml get-value phases.install commands: - echo &quot;Nothing to do in the install phase...&quot; [root@10 src]# cat buildspec.yml |shyaml get-value phases.install.commands - echo &quot;Nothing to do in the install phase...&quot; cat buildspec.yml |shyaml get-type phases.build.commands sequence [root@10 src]# cat buildspec.yml |shyaml get-type phases.build struct cat buildspec.yml |shyaml get-length phases.build.commands 3 [root@10 src]# cat buildspec.yml |shyaml get-value phases.build.commands - echo &quot;Build begin with [`date`]&quot; - sh build-cproject.sh - mvn install [root@10 src]# cat buildspec.yml |shyaml get-value phases.build.commands.-1 mvn install[root@10 src]# [root@10 src]# cat buildspec.yml |shyaml get-value phases.build.commands.2 mvn install[root@10 src]# [root@10 src]# cat buildspec.yml |shyaml get-value artifacts.files - source: src/java/distribution.zip destination: content/ action: unzip cat buildspec.yml |shyaml get-value artifacts.files.0.destination content/[root@10 src]#]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[django模糊匹配和大小写]]></title>
    <url>%2F2015%2F04%2F15%2Fdjango%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E5%92%8C%E5%A4%A7%E5%B0%8F%E5%86%99%2F</url>
    <content type="text"><![CDATA[example:12345678910from django.db.models import Qif(request.GET.has_key('search')): search = request.GET.get('search') logger.info(search) jobs_set = models.Deploy.objects.filter(Q(deployName__contains=search) | Q(submit__icontains=search)).order_by(order_by)[offset:offset+limit] total = models.Deploy.objects.filter(Q(deployName__contains=search) | Q(submit__contains=search)).count()else: logger.info("NOSEARCH") jobs_set = models.Deploy.objects.all().order_by(order_by)[offset:offset+limit] total = models.Deploy.objects.count() django 多个filter模糊匹配:.filter( Q(colName1 = search1) | Q(colName2 = search2) )django 是否匹配大小写:colName1__contains = search1 #精确匹配大小写, &apos;LIKE BINARY %s&apos; colName2__icontains = search2 #忽略大小写, &apos;LIKE %s&apos;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享一些好用的Chrome扩展]]></title>
    <url>%2F2015%2F02%2F18%2F%5B%E8%BD%AC%5D%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84Chrome%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[前言转自：https://4ark.me/post/549a6198.html 特别感谢，请勿用于商业，转载注明出处！！1.XX访问助手本来想了一波广告词来吹它，但想到… 算了，别问，问就是好用。 注：装了这个就可以访问之后介绍的扩展链接了。链接：XX访问助手 2. 新浪微博图床感谢新浪微博提供的免费图床（对外链无限制），以及吊炸天的 cdn 图片加速服务，从此妈妈再也不用担心我的图床不能用了，另外还支持在网页图片右键菜单中一键上传。链接：新浪微博图床 3. AdBlock最受欢迎的 Chrome 扩展，拥有超过 6000 万用户！拦截网页上的广告。链接：AdBlock 4. WEB 前端助手前端神器，包括 JSON 格式化、二维码生成与解码、信息编解码、代码压缩、美化、页面取色、Markdown与HTML互转、网页滚动截屏、正则表达式、时间转换工具、编码规范检测、页面性能检测、Ajax接口调试、密码生成器、JSON 比对工具、网页编码设置、便签笔记。链接：WEB 前端助手 5. JSON Viewer前面介绍的 WEB 前端工具也有 JSON 查看工具，但是它那个太丑了，所以我用这个，内置多种主题，是我见过最好看的 JSON 查看工具。链接：JSON Viewer 6. Standardized Screenshot一个非常好用的截图扩展，自动加上 macOS 的标题栏、以及阴影，配合微博图床一键上传根本不用保存在本地。链接：Standardized Screenshot 7. Chromoji - Emoji在某些系统中并不能显示 Emoji 表情，安装此扩展后就能在浏览器中显示和输入，你也能选择显示 Apple 或 Google 风格的 Emoji。链接：Chromoji - Emoji 8. Clear Cache如果你是前端开发人员，调试时需要经常清空浏览器缓存，以往我们需要经过几个步骤才能完成动作，现在只需单击一下按钮即可清除缓存和浏览数据。链接：Clear Cache 9. 二维码生成器把当前页面或者你输入的任何内容转化成二维码，生成后的二维码可以保存，并且无需联网，谁用谁知道。链接：二维码生成器 10. 翻译侠这是我用了众多翻译扩展后最喜欢的一个，貌似之前的作者已经不再维护了，现在由网友接手，挺好的，从此不再需要打开谷歌翻译网站。链接：翻译侠 11. 图流这个厉害了，你是否曾为了看图片，一张一张的点，看完一个系列手都费了，简直痛不欲生，现在，福音来了。 让我们打开知乎问题《平常人可以漂亮到什么程度？》，查看全部答案，开启图流，你会发现。 另外它还支持轮播展示，如果你经常逛一些你懂得网站，那它简直是老司机神器。链接：图流 12. 阅读模式提供与Safari阅读模式功能一致的插件，浏览文章页时候可进入友好的阅读模式，并自定义阅读功能。 唯一美中不足之处就是在阅读模式下无法选中文字（更不能使用划词翻译）。链接：阅读模式 13. Octotree这个估计不少人知道，它可以在 GitHub 左侧显示当前项目的目录结构，能轻松找到代码的位置。链接：Octotree 14. Enhanced Github这个可以在 GitHub 中显示仓库大小，每个文件的大小，下载链接和复制文件内容的选项。 要是能够支持单文件夹下载那就更好了。链接：Enhanced Github 15. Isometric Contributions装X神器，值得拥有。这里放上我心中的偶像 Linus 的贡献图。链接：Isometric Contributions 16. Git History这个扩展可以很炫酷地展示 GitHub 中任意一个文件的历史修改情况。链接：Isometric Contributions 17. Tampermonkey油猴怕是没有人不知道，它基本上是所有扩展中的佼佼者了。这里给两个可以发现好用的脚本的网站： https://greasyfork.org/zh-CN https://openuserjs.org/链接：Tampermonkey 18. Stylus其实类似的扩展还有 Stylish，但它会窃取用户的浏览历史（虽然某位药王说我们更愿意用隐私换便利）。 而 Stylus 就不会。链接：Stylus 19. Extension Manager一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全。链接：Extension Manager 欢迎留言补充！]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>Chrome</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[aws-lambda-用法]]></title>
    <url>%2F2015%2F01%2F11%2Faws-lambda-%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[aws lambda all packgeshttps://gist.github.com/gene1wood/4a052f39490fae00e0c3aws lambda logginghttps://gist.github.com/gene1wood/09b25d581ad1c9f79a9eaws lambda event and contenthttps://gist.github.com/gene1wood/24e431859c7590c8c834python create custom packagehttps://gist.github.com/gene1wood/d7f7f11ed75bcd14ba26f21db6fe5cb3python export aws iam policieshttps://gist.github.com/gene1wood/d7a74f9cfd9762254c4ec90fd8fa3b84python boto3 paginatorhttps://gist.github.com/gene1wood/9cc17012be3d9a7d2736a3a7f51370ff]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
</search>
